{
  "address": "0x52753615226F8aC8a464bfecb11Ef798CFF3793f",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_roundId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "_groupKey",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "bytes[]",
          "name": "activeTssMembers",
          "type": "bytes[]"
        }
      ],
      "name": "tssActiveMemberAppended",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_roundId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_threshold",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes[]",
          "name": "_inActiveTssMembers",
          "type": "bytes[]"
        }
      ],
      "name": "tssGroupMemberAppend",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "getTssGroupInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        },
        {
          "internalType": "bytes[]",
          "name": "",
          "type": "bytes[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTssGroupMembers",
      "outputs": [
        {
          "internalType": "bytes[]",
          "name": "",
          "type": "bytes[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTssGroupUnJailMembers",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTssInactiveGroupInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes[]",
          "name": "",
          "type": "bytes[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_publicKey",
          "type": "bytes"
        }
      ],
      "name": "getTssMember",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bytes",
              "name": "publicKey",
              "type": "bytes"
            },
            {
              "internalType": "address",
              "name": "nodeAddress",
              "type": "address"
            },
            {
              "internalType": "enum ITssGroupManager.MemberStatus",
              "name": "status",
              "type": "uint8"
            }
          ],
          "internalType": "struct ITssGroupManager.TssMember",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "inActiveIsEmpty",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "byteListA",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "byteListB",
          "type": "bytes"
        }
      ],
      "name": "isEqual",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "isInActiveMember",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_publicKey",
          "type": "bytes"
        }
      ],
      "name": "memberExistActive",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_publicKey",
          "type": "bytes"
        }
      ],
      "name": "memberExistInActive",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_publicKey",
          "type": "bytes"
        }
      ],
      "name": "memberJail",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_publicKey",
          "type": "bytes"
        }
      ],
      "name": "memberUnJail",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "publicKey",
          "type": "bytes"
        }
      ],
      "name": "publicKeyToAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ethSignedMessageHash",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "_sig",
          "type": "bytes"
        }
      ],
      "name": "recover",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_publicKey",
          "type": "bytes"
        }
      ],
      "name": "removeMember",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_publicKey",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "_groupPublicKey",
          "type": "bytes"
        }
      ],
      "name": "setGroupPublicKey",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "setStakingSlash",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_threshold",
          "type": "uint256"
        },
        {
          "internalType": "bytes[]",
          "name": "_batchPublicKey",
          "type": "bytes[]"
        }
      ],
      "name": "setTssGroupMember",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakingSlash",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "tssActiveMemberInfo",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "publicKey",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "nodeAddress",
          "type": "address"
        },
        {
          "internalType": "enum ITssGroupManager.MemberStatus",
          "name": "status",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_message",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "_sig",
          "type": "bytes"
        }
      ],
      "name": "verifySign",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x84f6873b5086a1dd93540dffd849d44f62971d56dc14e72b01149320743a84e4",
  "receipt": {
    "to": null,
    "from": "0xd5DeB9917eFbc36259164EcB89Ecf331eb663426",
    "contractAddress": "0x52753615226F8aC8a464bfecb11Ef798CFF3793f",
    "transactionIndex": 0,
    "gasUsed": "2674256",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0xecd02b96058f2c43d5fe10dae4877583ff50de759225b898caa00ff2d1750acd",
    "transactionHash": "0x84f6873b5086a1dd93540dffd849d44f62971d56dc14e72b01149320743a84e4",
    "logs": [],
    "blockNumber": 30,
    "cumulativeGasUsed": "2674256",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "b76654cbba9507395043149f478aa07e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_roundId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_groupKey\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes[]\",\"name\":\"activeTssMembers\",\"type\":\"bytes[]\"}],\"name\":\"tssActiveMemberAppended\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_roundId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_threshold\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes[]\",\"name\":\"_inActiveTssMembers\",\"type\":\"bytes[]\"}],\"name\":\"tssGroupMemberAppend\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"getTssGroupInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"bytes[]\",\"name\":\"\",\"type\":\"bytes[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTssGroupMembers\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"\",\"type\":\"bytes[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTssGroupUnJailMembers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTssInactiveGroupInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes[]\",\"name\":\"\",\"type\":\"bytes[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_publicKey\",\"type\":\"bytes\"}],\"name\":\"getTssMember\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes\",\"name\":\"publicKey\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"nodeAddress\",\"type\":\"address\"},{\"internalType\":\"enum ITssGroupManager.MemberStatus\",\"name\":\"status\",\"type\":\"uint8\"}],\"internalType\":\"struct ITssGroupManager.TssMember\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inActiveIsEmpty\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"byteListA\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"byteListB\",\"type\":\"bytes\"}],\"name\":\"isEqual\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"isInActiveMember\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_publicKey\",\"type\":\"bytes\"}],\"name\":\"memberExistActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_publicKey\",\"type\":\"bytes\"}],\"name\":\"memberExistInActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_publicKey\",\"type\":\"bytes\"}],\"name\":\"memberJail\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_publicKey\",\"type\":\"bytes\"}],\"name\":\"memberUnJail\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"publicKey\",\"type\":\"bytes\"}],\"name\":\"publicKeyToAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ethSignedMessageHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_sig\",\"type\":\"bytes\"}],\"name\":\"recover\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_publicKey\",\"type\":\"bytes\"}],\"name\":\"removeMember\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_publicKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_groupPublicKey\",\"type\":\"bytes\"}],\"name\":\"setGroupPublicKey\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setStakingSlash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_threshold\",\"type\":\"uint256\"},{\"internalType\":\"bytes[]\",\"name\":\"_batchPublicKey\",\"type\":\"bytes[]\"}],\"name\":\"setTssGroupMember\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingSlash\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"tssActiveMemberInfo\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"publicKey\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"nodeAddress\",\"type\":\"address\"},{\"internalType\":\"enum ITssGroupManager.MemberStatus\",\"name\":\"status\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_message\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_sig\",\"type\":\"bytes\"}],\"name\":\"verifySign\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/L1/tss/TssGroupManager.sol\":\"TssGroupManager\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x247c62047745915c0af6b955470a72d1696ebad4352d7d3011aef1a2463cd888\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0203dcadc5737d9ef2c211d6fa15d18ebc3b30dfa51903b64870b01a062b0b4e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x8cc03c5ac17e8a7396e487cda41fc1f1dfdb91db7d528e6da84bee3b6dd7e167\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x611aa3f23e59cfdd1863c536776407b3e33d695152a266fa7cfb34440a29a8a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xea5339a7fff0ed42b45be56a88efdd0b2ddde9fa480dc99fef9a6a4c5b776863\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../StringsUpgradeable.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSAUpgradeable {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", StringsUpgradeable.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0xe8c62ca00ed2d0a4d9b7e3c4bf7d62c821618b2cdb3c844da91a1193986851bf\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMathUpgradeable {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xcaa8b7861115ea691c77ddbeac140a444e0edcd1d9812a43942c0f6b42b36a49\",\"license\":\"MIT\"},\"contracts/L1/tss/ITssGroupManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >0.5.0 <0.9.0;\\n\\ninterface ITssGroupManager {\\n    enum MemberStatus {\\n        unJail,\\n        jail\\n    }\\n\\n    struct TssMember {\\n        bytes         publicKey;\\n        address       nodeAddress;\\n        MemberStatus  status;\\n    }\\n\\n    function setTssGroupMember(uint256 _threshold, bytes[] memory _batchPublicKey) external;\\n    function setGroupPublicKey(bytes memory _publicKey, bytes memory _groupPublicKey) external;\\n    function getTssGroupInfo() external returns (uint256, uint256, bytes memory, bytes[] memory);\\n    function getTssInactiveGroupInfo() external returns (uint256, uint256, bytes[] memory);\\n    function memberJail(bytes memory _publicKey) external;\\n    function memberUnJail(bytes memory _publicKey) external;\\n    function removeMember(bytes memory _publicKey) external;\\n    function getTssGroupUnJailMembers() external returns (address[] memory);\\n    function getTssGroupMembers() external returns (bytes[] memory);\\n    function getTssMember(bytes memory _publicKey) external returns (TssMember memory);\\n    function memberExistActive(bytes memory _publicKey) external returns (bool);\\n    function memberExistInActive(bytes memory _publicKey) external returns (bool);\\n    function inActiveIsEmpty() external returns (bool);\\n    function verifySign(bytes32 _message, bytes memory _sig) external returns (bool);\\n    function publicKeyToAddress (bytes memory publicKey) external returns (address);\\n}\\n\",\"keccak256\":\"0x6bbaf76169b849c95d73940ab1a90742b1dbc611387971625d9d1914589f1c00\",\"license\":\"MIT\"},\"contracts/L1/tss/TssGroupManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"./ITssGroupManager.sol\\\";\\n\\ncontract TssGroupManager is\\n    OwnableUpgradeable,\\n    ReentrancyGuardUpgradeable,\\n    ITssGroupManager\\n{\\n    using SafeMathUpgradeable for uint256;\\n    using ECDSAUpgradeable for bytes32;\\n    using AddressUpgradeable for address;\\n    bytes confirmGroupPublicKey;\\n    address confirmGroupAddress;\\n    uint256 threshold;\\n    uint256 gRoundId;\\n    uint256 confirmNumber;\\n    address public stakingSlash;\\n\\n    bytes[] activeTssMembers; // active tss member group\\n    bytes[] inActiveTssMembers; // inactive tss member group\\n    mapping(bytes => TssMember) public tssActiveMemberInfo; // Tss member publicKey => tssMember\\n    mapping(bytes => bytes) private memberGroupKey; // user publicKey => Cpk\\n    mapping(bytes => uint256) private groupKeyCounter; // Cpk counter\\n    mapping(bytes => bool) private isSubmitGroupKey; // submit group key or not\\n    mapping(bytes => bool) public isInActiveMember; // tss member exist or not\\n\\n    event tssGroupMemberAppend(uint256 _roundId, uint256 _threshold, bytes[] _inActiveTssMembers);\\n\\n    event tssActiveMemberAppended(uint256 _roundId, bytes _groupKey, bytes[] activeTssMembers);\\n\\n    function initialize() public initializer {\\n        __Ownable_init();\\n        gRoundId = 0;\\n        confirmNumber = 0;\\n        threshold = 0;\\n    }\\n\\n    modifier onlyStakingSlash() {\\n        require(msg.sender == stakingSlash, \\\"contract call is not staking slashing\\\");\\n        _;\\n    }\\n\\n    function setStakingSlash(address _address) public onlyOwner {\\n        stakingSlash = _address;\\n    }\\n\\n    /**\\n     * @inheritdoc ITssGroupManager\\n     */\\n    // slither-disable-next-line external-function\\n    function setTssGroupMember(uint256 _threshold, bytes[] memory _batchPublicKey)\\n        public\\n        override\\n        onlyOwner\\n    {\\n        require((_batchPublicKey.length > 0), \\\"batch public key is empty\\\");\\n        require(_threshold < _batchPublicKey.length, \\\"threshold must less than tss member\\\");\\n        // require((inActiveTssMembers.length == 0), \\\"inactive tss member array is not empty\\\");\\n        if(inActiveTssMembers.length > 0) {\\n            for (uint256 i = 0; i < inActiveTssMembers.length; i++) {\\n                // re-election clear data\\n                delete groupKeyCounter[memberGroupKey[inActiveTssMembers[i]]];\\n                delete memberGroupKey[inActiveTssMembers[i]];\\n                delete isSubmitGroupKey[inActiveTssMembers[i]];\\n                delete isInActiveMember[inActiveTssMembers[i]];\\n            }\\n            delete inActiveTssMembers;\\n        }\\n        for (uint256 i = 0; i < _batchPublicKey.length; i++) {\\n            inActiveTssMembers.push(_batchPublicKey[i]);\\n            isInActiveMember[_batchPublicKey[i]] = true;\\n            isSubmitGroupKey[_batchPublicKey[i]] = false;\\n        }\\n        threshold = _threshold;\\n        gRoundId = gRoundId + 1;\\n        confirmNumber = 0;\\n        emit tssGroupMemberAppend(gRoundId, _threshold, _batchPublicKey);\\n    }\\n\\n    /**\\n     * @inheritdoc ITssGroupManager\\n     */\\n    // slither-disable-next-line external-function\\n    function setGroupPublicKey(bytes memory _publicKey, bytes memory _groupPublicKey)\\n        public\\n        override\\n    {\\n        require(isInActiveMember[_publicKey] == true, \\\"your public key is not in InActiveMember\\\");\\n        require(msg.sender == publicKeyToAddress(_publicKey), \\\"public key not match\\\");\\n\\n        if (isSubmitGroupKey[_publicKey] == false) {\\n            isSubmitGroupKey[_publicKey] = true;\\n            confirmNumber = confirmNumber + 1;\\n        }\\n        if (!isEqual(memberGroupKey[_publicKey], _groupPublicKey)) {\\n            groupKeyCounter[_groupPublicKey] += 1;\\n            if (memberGroupKey[_publicKey].length != 0) {\\n                groupKeyCounter[memberGroupKey[_publicKey]] -= 1;\\n            }\\n            memberGroupKey[_publicKey] = _groupPublicKey;\\n        }\\n        if (groupKeyCounter[_groupPublicKey] == inActiveTssMembers.length) {\\n            updateTssMember(_groupPublicKey);\\n        }\\n    }\\n\\n    /**\\n     * @inheritdoc ITssGroupManager\\n     */\\n    // slither-disable-next-line external-function\\n    function getTssGroupInfo()\\n        public\\n        view\\n        override\\n        returns (\\n            uint256,\\n            uint256,\\n            bytes memory,\\n            bytes[] memory\\n        )\\n    {\\n        if (inActiveTssMembers.length > 0) {\\n            return (gRoundId - 1, threshold, confirmGroupPublicKey, activeTssMembers);\\n        }\\n        return (gRoundId, threshold, confirmGroupPublicKey, activeTssMembers);\\n    }\\n\\n    /**\\n    * @inheritdoc ITssGroupManager\\n     */\\n    // slither-disable-next-line external-function\\n    function getTssInactiveGroupInfo() public view override returns (uint256, uint256,  bytes[] memory){\\n        return (gRoundId, threshold, inActiveTssMembers);\\n    }\\n\\n    /**\\n     * @inheritdoc ITssGroupManager\\n     */\\n    // slither-disable-next-line external-function\\n    function memberJail(bytes memory _publicKey) public override onlyStakingSlash {\\n        tssActiveMemberInfo[_publicKey].status = MemberStatus.jail;\\n    }\\n\\n    /**\\n     * @inheritdoc ITssGroupManager\\n     */\\n    // slither-disable-next-line external-function\\n    function memberUnJail(bytes memory _publicKey) public override onlyStakingSlash {\\n        tssActiveMemberInfo[_publicKey].status = MemberStatus.unJail;\\n    }\\n\\n    /**\\n     * @inheritdoc ITssGroupManager\\n     */\\n    // slither-disable-next-line external-function\\n    function removeMember(bytes memory _publicKey) public override onlyStakingSlash {\\n        for (uint256 i = 0; i < activeTssMembers.length; i++) {\\n            if (isEqual(activeTssMembers[i], _publicKey)) {\\n                removeActiveTssMembers(i);\\n            }\\n        }\\n        delete tssActiveMemberInfo[_publicKey];\\n    }\\n\\n    /**\\n     * @inheritdoc ITssGroupManager\\n     */\\n    // slither-disable-next-line external-function\\n    function getTssGroupUnJailMembers() public view override returns (address[] memory) {\\n        uint256 expectedLength;\\n        for (uint256 i = 0; i < activeTssMembers.length; i++) {\\n            if (tssActiveMemberInfo[activeTssMembers[i]].status == MemberStatus.unJail) {\\n                expectedLength++;\\n            }\\n        }\\n        address[] memory _addresses = new address[](expectedLength);\\n        uint256 index;\\n        for (uint256 i = 0; i < activeTssMembers.length; i++) {\\n            if (tssActiveMemberInfo[activeTssMembers[i]].status == MemberStatus.unJail) {\\n                _addresses[index] = tssActiveMemberInfo[activeTssMembers[i]].nodeAddress;\\n                index++;\\n            }\\n        }\\n        return _addresses;\\n    }\\n\\n    /**\\n     * @inheritdoc ITssGroupManager\\n     */\\n    // slither-disable-next-line external-function\\n    function getTssGroupMembers() public view override returns (bytes[] memory) {\\n        return activeTssMembers;\\n    }\\n\\n    /**\\n     * @inheritdoc ITssGroupManager\\n     */\\n    // slither-disable-next-line external-function\\n    function getTssMember(bytes memory _publicKey) public view override returns (TssMember memory) {\\n        return tssActiveMemberInfo[_publicKey];\\n    }\\n\\n    /**\\n     * @inheritdoc ITssGroupManager\\n     */\\n    // slither-disable-next-line external-function\\n    function memberExistActive(bytes memory _publicKey) public view override returns (bool) {\\n        if (tssActiveMemberInfo[_publicKey].publicKey.length > 0) {\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @inheritdoc ITssGroupManager\\n     */\\n    // slither-disable-next-line external-function\\n    function memberExistInActive(bytes memory _publicKey) public view override returns (bool) {\\n        return isInActiveMember[_publicKey];\\n    }\\n\\n    /**\\n     * @inheritdoc ITssGroupManager\\n     */\\n    // slither-disable-next-line external-function\\n    function inActiveIsEmpty() public view override returns (bool) {\\n        return inActiveTssMembers.length == 0;\\n    }\\n\\n    /**\\n     * @inheritdoc ITssGroupManager\\n     */\\n    // slither-disable-next-line external-function\\n    function verifySign(bytes32 _message, bytes memory _sig) public view override returns (bool) {\\n        return (recover(_message, _sig) == confirmGroupAddress);\\n    }\\n\\n    /**\\n     * @inheritdoc ITssGroupManager\\n     */\\n    // slither-disable-next-line external-function\\n    function publicKeyToAddress(bytes memory publicKey) public pure override returns (address) {\\n        require(publicKey.length == 64, \\\"public key length must 64 bytes\\\");\\n        return address(uint160(uint256(keccak256(publicKey))));\\n    }\\n\\n    function updateTssMember(bytes memory _groupPublicKey) private {\\n        if (activeTssMembers.length > 0) {\\n            for (uint256 i = 0; i < activeTssMembers.length; i++) {\\n                delete tssActiveMemberInfo[activeTssMembers[i]];    // delete tss active member map\\n            }\\n            delete activeTssMembers;  // delete active members\\n        }\\n        for (uint256 i = 0; i < inActiveTssMembers.length; i++) {\\n            activeTssMembers.push(inActiveTssMembers[i]);\\n            tssActiveMemberInfo[inActiveTssMembers[i]] = TssMember({\\n                publicKey: inActiveTssMembers[i],\\n                nodeAddress: publicKeyToAddress(inActiveTssMembers[i]),\\n                status: MemberStatus.unJail\\n            });\\n            // election finish clear InActiveMember data\\n            delete groupKeyCounter[memberGroupKey[inActiveTssMembers[i]]];\\n            delete memberGroupKey[inActiveTssMembers[i]];\\n            delete isSubmitGroupKey[inActiveTssMembers[i]];\\n            delete isInActiveMember[inActiveTssMembers[i]];\\n        }\\n        delete inActiveTssMembers;\\n        confirmGroupPublicKey = _groupPublicKey;\\n        confirmGroupAddress = publicKeyToAddress(_groupPublicKey);\\n        emit tssActiveMemberAppended(gRoundId, _groupPublicKey, activeTssMembers);\\n    }\\n\\n    function recover(bytes32 _ethSignedMessageHash, bytes memory _sig)\\n        public\\n        pure\\n        returns (address)\\n    {\\n        (bytes32 r, bytes32 s, uint8 v) = _split(_sig);\\n        address signer = ecrecover(_ethSignedMessageHash, v, r, s);\\n        require(signer != address(0), \\\"ecrecover failed\\\");\\n        return signer;\\n    }\\n\\n    function _split(bytes memory _sig)\\n        internal\\n        pure\\n        returns (\\n            bytes32 r,\\n            bytes32 s,\\n            uint8 v\\n        )\\n    {\\n        require(_sig.length == 65, \\\"invalid signature length\\\");\\n        assembly {\\n            r := mload(add(_sig, 32))\\n            s := mload(add(_sig, 64))\\n            v := byte(0, mload(add(_sig, 96)))\\n        }\\n        if (v < 27) v += 27;\\n    }\\n\\n    function isEqual(bytes memory byteListA, bytes memory byteListB) public pure returns (bool) {\\n        if (byteListA.length != byteListB.length) return false;\\n        for (uint256 i = 0; i < byteListA.length; i++) {\\n            if (byteListA[i] != byteListB[i]) return false;\\n        }\\n        return true;\\n    }\\n\\n    function removeActiveTssMembers(uint256 _index) private {\\n        require(_index < activeTssMembers.length, \\\"index out of bound\\\");\\n        for (uint256 i = _index; i < activeTssMembers.length - 1; i++) {\\n            activeTssMembers[i] = activeTssMembers[i + 1];\\n        }\\n        activeTssMembers.pop();\\n    }\\n}\\n\",\"keccak256\":\"0x1033ae4c3b46a36bb023e1768840e40024578614951f2187ddac9f5016607519\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50612f8f806100206000396000f3fe608060405234801561001057600080fd5b50600436106101a35760003560e01c8063715018a6116100ee578063b3bd9ac411610097578063e46a636811610071578063e46a63681461038f578063f2fde38b146103bd578063fcca5592146103d0578063fd3eb81f146103e857600080fd5b8063b3bd9ac41461033a578063bcbc5fc61461035c578063cf4c8a7b1461036f57600080fd5b80638a51d8b4116100c85780638a51d8b4146102fe5780638da5cb5b1461030757806395f645bc1461032557600080fd5b8063715018a6146102db5780637a952c11146102e35780638129fc1c146102f657600080fd5b8063404a6986116101505780634679b3661161012a5780634679b366146102955780634866e2e0146102a857806354bbb914146102bb57600080fd5b8063404a698614610258578063429ec49c1461026f57806343ae656c1461028257600080fd5b80632cd00d53116101815780632cd00d531461020d5780633231a7f014610222578063343598081461024557600080fd5b806319045a25146101a85780631a47931b146101e5578063254ff981146101fa575b600080fd5b6101bb6101b63660046127d3565b6103fb565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b6101f86101f336600461281a565b61050f565b005b6101f86102083660046128e9565b610895565b61021561096e565b6040516101dc9190612926565b6102356102303660046127d3565b610b76565b60405190151581526020016101dc565b610235610253366004612980565b610bba565b610260610c7c565b6040516101dc93929190612aa9565b6101f861027d3660046128e9565b610d67565b6101bb6102903660046128e9565b610e06565b6101f86102a3366004612980565b610e65565b6102356102b63660046128e9565b6111bf565b6102ce6102c93660046128e9565b6111ea565b6040516101dc9190612b3b565b6101f8611332565b6101f86102f13660046128e9565b611346565b6101f8611508565b609e5415610235565b60335473ffffffffffffffffffffffffffffffffffffffff166101bb565b61032d611672565b6040516101dc9190612b93565b61034d6103483660046128e9565b61174b565b6040516101dc93929190612bad565b61023561036a3660046128e9565b61182e565b609c546101bb9073ffffffffffffffffffffffffffffffffffffffff1681565b61023561039d3660046128e9565b805160208183018101805160a38252928201919093012091525460ff1681565b6101f86103cb366004612beb565b611873565b6103d861190d565b6040516101dc9493929190612c21565b6101f86103f6366004612beb565b611c19565b60008060008061040a85611c68565b92509250925060006001878386866040516000815260200160405260405161044e949392919093845260ff9290921660208401526040830152606082015260800190565b6020604051602081039080840390855afa158015610470573d6000803e3d6000fd5b50506040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0015191505073ffffffffffffffffffffffffffffffffffffffff81166105035760405162461bcd60e51b815260206004820152601060248201527f65637265636f766572206661696c65640000000000000000000000000000000060448201526064015b60405180910390fd5b93505050505b92915050565b610517611cf1565b60008151116105685760405162461bcd60e51b815260206004820152601960248201527f6261746368207075626c6963206b657920697320656d7074790000000000000060448201526064016104fa565b805182106105de5760405162461bcd60e51b815260206004820152602360248201527f7468726573686f6c64206d757374206c657373207468616e20747373206d656d60448201527f626572000000000000000000000000000000000000000000000000000000000060648201526084016104fa565b609e54156107395760005b609e5481101561072c5760a160a0609e838154811061060a5761060a612c5d565b906000526020600020016040516106219190612ce0565b90815260405190819003602001812061063991612ce0565b90815260200160405180910390206000905560a0609e828154811061066057610660612c5d565b906000526020600020016040516106779190612ce0565b90815260200160405180910390206000610691919061253e565b60a2609e82815481106106a6576106a6612c5d565b906000526020600020016040516106bd9190612ce0565b908152604051908190036020019020805460ff19169055609e805460a39190839081106106ec576106ec612c5d565b906000526020600020016040516107039190612ce0565b908152604051908190036020019020805460ff191690558061072481612d81565b9150506105e9565b50610739609e6000612578565b60005b815181101561083957609e82828151811061075957610759612c5d565b6020908102919091018101518254600181018455600093845292829020815161078b9491909101929190910190612596565b50600160a38383815181106107a2576107a2612c5d565b60200260200101516040516107b79190612dba565b908152602001604051809103902060006101000a81548160ff021916908315150217905550600060a28383815181106107f2576107f2612c5d565b60200260200101516040516108079190612dba565b908152604051908190036020019020805491151560ff199092169190911790558061083181612d81565b91505061073c565b506099829055609a5461084d906001612dd6565b609a8190556000609b556040517ffa26843b7ced045dd12994ee0e73c6f0904c3a4608bce58ae304d606035b079e916108899185908590612aa9565b60405180910390a15050565b609c5473ffffffffffffffffffffffffffffffffffffffff1633146109225760405162461bcd60e51b815260206004820152602560248201527f636f6e74726163742063616c6c206973206e6f74207374616b696e6720736c6160448201527f7368696e6700000000000000000000000000000000000000000000000000000060648201526084016104fa565b6001609f826040516109349190612dba565b908152602001604051809103902060010160146101000a81548160ff0219169083600181111561096657610966612ad1565b021790555050565b60606000805b609d54811015610a02576000609f609d838154811061099557610995612c5d565b906000526020600020016040516109ac9190612ce0565b908152602001604051809103902060010160149054906101000a900460ff1660018111156109dc576109dc612ad1565b14156109f057816109ec81612d81565b9250505b806109fa81612d81565b915050610974565b5060008167ffffffffffffffff811115610a1e57610a1e6126c7565b604051908082528060200260200182016040528015610a47578160200160208202803683370190505b5090506000805b609d54811015610b6d576000609f609d8381548110610a6f57610a6f612c5d565b90600052602060002001604051610a869190612ce0565b908152602001604051809103902060010160149054906101000a900460ff166001811115610ab657610ab6612ad1565b1415610b5b57609f609d8281548110610ad157610ad1612c5d565b90600052602060002001604051610ae89190612ce0565b90815260405190819003602001902060010154835173ffffffffffffffffffffffffffffffffffffffff90911690849084908110610b2857610b28612c5d565b73ffffffffffffffffffffffffffffffffffffffff9092166020928302919091019091015281610b5781612d81565b9250505b80610b6581612d81565b915050610a4e565b50909392505050565b60985460009073ffffffffffffffffffffffffffffffffffffffff16610b9c84846103fb565b73ffffffffffffffffffffffffffffffffffffffff16149392505050565b60008151835114610bcd57506000610509565b60005b8351811015610c7257828181518110610beb57610beb612c5d565b602001015160f81c60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916848281518110610c2a57610c2a612c5d565b01602001517fff000000000000000000000000000000000000000000000000000000000000001614610c60576000915050610509565b80610c6a81612d81565b915050610bd0565b5060019392505050565b6000806060609a54609954609e80805480602002602001604051908101604052809291908181526020016000905b82821015610d56578382906000526020600020018054610cc990612c8c565b80601f0160208091040260200160405190810160405280929190818152602001828054610cf590612c8c565b8015610d425780601f10610d1757610100808354040283529160200191610d42565b820191906000526020600020905b815481529060010190602001808311610d2557829003601f168201915b505050505081526020019060010190610caa565b505050509050925092509250909192565b609c5473ffffffffffffffffffffffffffffffffffffffff163314610df45760405162461bcd60e51b815260206004820152602560248201527f636f6e74726163742063616c6c206973206e6f74207374616b696e6720736c6160448201527f7368696e6700000000000000000000000000000000000000000000000000000060648201526084016104fa565b6000609f826040516109349190612dba565b60008151604014610e595760405162461bcd60e51b815260206004820152601f60248201527f7075626c6963206b6579206c656e677468206d7573742036342062797465730060448201526064016104fa565b50805160209091012090565b60a382604051610e759190612dba565b9081526040519081900360200190205460ff161515600114610eff5760405162461bcd60e51b815260206004820152602860248201527f796f7572207075626c6963206b6579206973206e6f7420696e20496e4163746960448201527f76654d656d62657200000000000000000000000000000000000000000000000060648201526084016104fa565b610f0882610e06565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610f825760405162461bcd60e51b815260206004820152601460248201527f7075626c6963206b6579206e6f74206d6174636800000000000000000000000060448201526064016104fa565b60a282604051610f929190612dba565b9081526040519081900360200190205460ff16610fed57600160a283604051610fbb9190612dba565b908152604051908190036020019020805491151560ff19909216919091179055609b54610fe9906001612dd6565b609b555b61109d60a0836040516110009190612dba565b9081526020016040518091039020805461101990612c8c565b80601f016020809104026020016040519081016040528092919081815260200182805461104590612c8c565b80156110925780601f1061106757610100808354040283529160200191611092565b820191906000526020600020905b81548152906001019060200180831161107557829003601f168201915b505050505082610bba565b61118957600160a1826040516110b39190612dba565b908152602001604051809103902060008282546110d09190612dd6565b909155505060405160a0906110e6908490612dba565b908152602001604051809103902080546110ff90612c8c565b15905061115557600160a160a08460405161111a9190612dba565b90815260405190819003602001812061113291612ce0565b9081526020016040518091039020600082825461114f9190612dee565b90915550505b8060a0836040516111669190612dba565b90815260200160405180910390209080519060200190611187929190612596565b505b609e5460405160a19061119d908490612dba565b90815260200160405180910390205414156111bb576111bb81611d58565b5050565b600060a3826040516111d19190612dba565b9081526040519081900360200190205460ff1692915050565b61120b60408051606080820183528152600060208201819052909182015290565b609f8260405161121b9190612dba565b908152602001604051809103902060405180606001604052908160008201805461124490612c8c565b80601f016020809104026020016040519081016040528092919081815260200182805461127090612c8c565b80156112bd5780601f10611292576101008083540402835291602001916112bd565b820191906000526020600020905b8154815290600101906020018083116112a057829003601f168201915b505050918352505060018281015473ffffffffffffffffffffffffffffffffffffffff8116602084015260409092019174010000000000000000000000000000000000000000900460ff169081111561131857611318612ad1565b600181111561132957611329612ad1565b90525092915050565b61133a611cf1565b61134460006122b7565b565b609c5473ffffffffffffffffffffffffffffffffffffffff1633146113d35760405162461bcd60e51b815260206004820152602560248201527f636f6e74726163742063616c6c206973206e6f74207374616b696e6720736c6160448201527f7368696e6700000000000000000000000000000000000000000000000000000060648201526084016104fa565b60005b609d548110156114af5761148f609d82815481106113f6576113f6612c5d565b90600052602060002001805461140b90612c8c565b80601f016020809104026020016040519081016040528092919081815260200182805461143790612c8c565b80156114845780601f1061145957610100808354040283529160200191611484565b820191906000526020600020905b81548152906001019060200180831161146757829003601f168201915b505050505083610bba565b1561149d5761149d8161232e565b806114a781612d81565b9150506113d6565b50609f816040516114c09190612dba565b90815260405190819003602001902060006114db828261253e565b5060010180547fffffffffffffffffffffff00000000000000000000000000000000000000000016905550565b600054610100900460ff16158080156115285750600054600160ff909116105b806115425750303b158015611542575060005460ff166001145b6115b45760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084016104fa565b6000805460ff1916600117905580156115f457600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff166101001790555b6115fc612438565b6000609a819055609b819055609955801561166f57600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498906020015b60405180910390a15b50565b6060609d805480602002602001604051908101604052809291908181526020016000905b828210156117425783829060005260206000200180546116b590612c8c565b80601f01602080910402602001604051908101604052809291908181526020018280546116e190612c8c565b801561172e5780601f106117035761010080835404028352916020019161172e565b820191906000526020600020905b81548152906001019060200180831161171157829003601f168201915b505050505081526020019060010190611696565b50505050905090565b8051602081830181018051609f8252928201919093012091528054819061177190612c8c565b80601f016020809104026020016040519081016040528092919081815260200182805461179d90612c8c565b80156117ea5780601f106117bf576101008083540402835291602001916117ea565b820191906000526020600020905b8154815290600101906020018083116117cd57829003601f168201915b5050506001909301549192505073ffffffffffffffffffffffffffffffffffffffff81169060ff740100000000000000000000000000000000000000009091041683565b600080609f836040516118419190612dba565b908152604051908190036020019020805461185b90612c8c565b9050111561186b57506001919050565b506000919050565b61187b611cf1565b73ffffffffffffffffffffffffffffffffffffffff81166119045760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084016104fa565b61166f816122b7565b609e546000908190606090819015611aa1576001609a5461192e9190612dee565b6099546097609d81805461194190612c8c565b80601f016020809104026020016040519081016040528092919081815260200182805461196d90612c8c565b80156119ba5780601f1061198f576101008083540402835291602001916119ba565b820191906000526020600020905b81548152906001019060200180831161199d57829003601f168201915b5050505050915080805480602002602001604051908101604052809291908181526020016000905b82821015611a8e578382906000526020600020018054611a0190612c8c565b80601f0160208091040260200160405190810160405280929190818152602001828054611a2d90612c8c565b8015611a7a5780601f10611a4f57610100808354040283529160200191611a7a565b820191906000526020600020905b815481529060010190602001808311611a5d57829003601f168201915b5050505050815260200190600101906119e2565b5050505090509350935093509350611c13565b609a546099546097609d818054611ab790612c8c565b80601f0160208091040260200160405190810160405280929190818152602001828054611ae390612c8c565b8015611b305780601f10611b0557610100808354040283529160200191611b30565b820191906000526020600020905b815481529060010190602001808311611b1357829003601f168201915b5050505050915080805480602002602001604051908101604052809291908181526020016000905b82821015611c04578382906000526020600020018054611b7790612c8c565b80601f0160208091040260200160405190810160405280929190818152602001828054611ba390612c8c565b8015611bf05780601f10611bc557610100808354040283529160200191611bf0565b820191906000526020600020905b815481529060010190602001808311611bd357829003601f168201915b505050505081526020019060010190611b58565b50505050905093509350935093505b90919293565b611c21611cf1565b609c80547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b60008060008351604114611cbe5760405162461bcd60e51b815260206004820152601860248201527f696e76616c6964207369676e6174757265206c656e677468000000000000000060448201526064016104fa565b50505060208101516040820151606083015160001a601b811015611cea57611ce7601b82612e05565b90505b9193909250565b60335473ffffffffffffffffffffffffffffffffffffffff1633146113445760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016104fa565b609d5415611dfd5760005b609d54811015611df057609f609d8281548110611d8257611d82612c5d565b90600052602060002001604051611d999190612ce0565b9081526040519081900360200190206000611db4828261253e565b5060010180547fffffffffffffffffffffff00000000000000000000000000000000000000000016905580611de881612d81565b915050611d63565b50611dfd609d6000612578565b60005b609e5481101561221257609d609e8281548110611e1f57611e1f612c5d565b600091825260208083208454600181018655948452922091018054919092019190611e4990612c8c565b611e5492919061261a565b506040518060600160405280609e8381548110611e7357611e73612c5d565b906000526020600020018054611e8890612c8c565b80601f0160208091040260200160405190810160405280929190818152602001828054611eb490612c8c565b8015611f015780601f10611ed657610100808354040283529160200191611f01565b820191906000526020600020905b815481529060010190602001808311611ee457829003601f168201915b50505050508152602001611fb9609e8481548110611f2157611f21612c5d565b906000526020600020018054611f3690612c8c565b80601f0160208091040260200160405190810160405280929190818152602001828054611f6290612c8c565b8015611faf5780601f10611f8457610100808354040283529160200191611faf565b820191906000526020600020905b815481529060010190602001808311611f9257829003601f168201915b5050505050610e06565b73ffffffffffffffffffffffffffffffffffffffff1681526020016000815250609f609e8381548110611fee57611fee612c5d565b906000526020600020016040516120059190612ce0565b9081526020016040518091039020600082015181600001908051906020019061202f929190612596565b5060208201516001808301805473ffffffffffffffffffffffffffffffffffffffff9093167fffffffffffffffffffffffff000000000000000000000000000000000000000084168117825560408601519391927fffffffffffffffffffffff0000000000000000000000000000000000000000009092161790740100000000000000000000000000000000000000009084908111156120d1576120d1612ad1565b021790555090505060a160a0609e83815481106120f0576120f0612c5d565b906000526020600020016040516121079190612ce0565b90815260405190819003602001812061211f91612ce0565b90815260200160405180910390206000905560a0609e828154811061214657612146612c5d565b9060005260206000200160405161215d9190612ce0565b90815260200160405180910390206000612177919061253e565b60a2609e828154811061218c5761218c612c5d565b906000526020600020016040516121a39190612ce0565b908152604051908190036020019020805460ff19169055609e805460a39190839081106121d2576121d2612c5d565b906000526020600020016040516121e99190612ce0565b908152604051908190036020019020805460ff191690558061220a81612d81565b915050611e00565b5061221f609e6000612578565b8051612232906097906020840190612596565b5061223c81610e06565b609880547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055609a546040517f61c7922e50ad7ea3d35879a4a819ae97eb09b665f2113451d7ada7cb2b689b6691611666918490609d90612e2a565b6033805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b609d54811061237f5760405162461bcd60e51b815260206004820152601260248201527f696e646578206f7574206f6620626f756e64000000000000000000000000000060448201526064016104fa565b805b609d5461239090600190612dee565b81101561240557609d6123a4826001612dd6565b815481106123b4576123b4612c5d565b90600052602060002001609d82815481106123d1576123d1612c5d565b906000526020600020019080546123e790612c8c565b6123f292919061261a565b50806123fd81612d81565b915050612381565b50609d80548061241757612417612f2a565b600190038181906000526020600020016000612433919061253e565b905550565b600054610100900460ff166124b55760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e6700000000000000000000000000000000000000000060648201526084016104fa565b611344600054610100900460ff166125355760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e6700000000000000000000000000000000000000000060648201526084016104fa565b611344336122b7565b50805461254a90612c8c565b6000825580601f1061255a575050565b601f01602090049060005260206000209081019061166f9190612695565b508054600082559060005260206000209081019061166f91906126aa565b8280546125a290612c8c565b90600052602060002090601f0160209004810192826125c4576000855561260a565b82601f106125dd57805160ff191683800117855561260a565b8280016001018555821561260a579182015b8281111561260a5782518255916020019190600101906125ef565b50612616929150612695565b5090565b82805461262690612c8c565b90600052602060002090601f016020900481019282612648576000855561260a565b82601f10612659578054855561260a565b8280016001018555821561260a57600052602060002091601f016020900482015b8281111561260a57825482559160010191906001019061267a565b5b808211156126165760008155600101612696565b808211156126165760006126be828261253e565b506001016126aa565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff8111828210171561273d5761273d6126c7565b604052919050565b600082601f83011261275657600080fd5b813567ffffffffffffffff811115612770576127706126c7565b6127a160207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f840116016126f6565b8181528460208386010111156127b657600080fd5b816020850160208301376000918101602001919091529392505050565b600080604083850312156127e657600080fd5b82359150602083013567ffffffffffffffff81111561280457600080fd5b61281085828601612745565b9150509250929050565b6000806040838503121561282d57600080fd5b8235915060208084013567ffffffffffffffff8082111561284d57600080fd5b818601915086601f83011261286157600080fd5b813581811115612873576128736126c7565b8060051b6128828582016126f6565b918252838101850191858101908a84111561289c57600080fd5b86860192505b838310156128d8578235858111156128ba5760008081fd5b6128c88c89838a0101612745565b83525091860191908601906128a2565b809750505050505050509250929050565b6000602082840312156128fb57600080fd5b813567ffffffffffffffff81111561291257600080fd5b61291e84828501612745565b949350505050565b6020808252825182820181905260009190848201906040850190845b8181101561297457835173ffffffffffffffffffffffffffffffffffffffff1683529284019291840191600101612942565b50909695505050505050565b6000806040838503121561299357600080fd5b823567ffffffffffffffff808211156129ab57600080fd5b6129b786838701612745565b935060208501359150808211156129cd57600080fd5b5061281085828601612745565b60005b838110156129f55781810151838201526020016129dd565b83811115612a04576000848401525b50505050565b60008151808452612a228160208601602086016129da565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b600081518084526020808501808196508360051b8101915082860160005b85811015612a9c578284038952612a8a848351612a0a565b98850198935090840190600101612a72565b5091979650505050505050565b838152826020820152606060408201526000612ac86060830184612a54565b95945050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60028110612b37577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b9052565b602081526000825160606020840152612b576080840182612a0a565b905073ffffffffffffffffffffffffffffffffffffffff60208501511660408401526040840151612b8b6060850182612b00565b509392505050565b602081526000612ba66020830184612a54565b9392505050565b606081526000612bc06060830186612a0a565b905073ffffffffffffffffffffffffffffffffffffffff8416602083015261291e6040830184612b00565b600060208284031215612bfd57600080fd5b813573ffffffffffffffffffffffffffffffffffffffff81168114612ba657600080fd5b848152836020820152608060408201526000612c406080830185612a0a565b8281036060840152612c528185612a54565b979650505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600181811c90821680612ca057607f821691505b60208210811415612cda577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b6000808354612cee81612c8c565b60018281168015612d065760018114612d1757612d46565b60ff19841687528287019450612d46565b8760005260208060002060005b85811015612d3d5781548a820152908401908201612d24565b50505082870194505b50929695505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415612db357612db3612d52565b5060010190565b60008251612dcc8184602087016129da565b9190910192915050565b60008219821115612de957612de9612d52565b500190565b600082821015612e0057612e00612d52565b500390565b600060ff821660ff84168060ff03821115612e2257612e22612d52565b019392505050565b83815260006020606081840152612e446060840186612a0a565b83810360408501528085548083528383019150838160051b8401016000888152858120815b84811015612f19577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0878503018652828254612ea481612c8c565b80875260018281168015612ebf5760018114612ed357612f02565b60ff1984168d8a0152604089019450612f02565b8688528c8820885b84811015612efa5781548f828d01015283820191508e81019050612edb565b8a018e019550505b50988b019892965050509190910190600101612e69565b50919b9a5050505050505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fdfea2646970667358221220fd8a9cafd92c9ce475bbe8dbdccaa366ac86a1bf51983175546912b055acee0264736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101a35760003560e01c8063715018a6116100ee578063b3bd9ac411610097578063e46a636811610071578063e46a63681461038f578063f2fde38b146103bd578063fcca5592146103d0578063fd3eb81f146103e857600080fd5b8063b3bd9ac41461033a578063bcbc5fc61461035c578063cf4c8a7b1461036f57600080fd5b80638a51d8b4116100c85780638a51d8b4146102fe5780638da5cb5b1461030757806395f645bc1461032557600080fd5b8063715018a6146102db5780637a952c11146102e35780638129fc1c146102f657600080fd5b8063404a6986116101505780634679b3661161012a5780634679b366146102955780634866e2e0146102a857806354bbb914146102bb57600080fd5b8063404a698614610258578063429ec49c1461026f57806343ae656c1461028257600080fd5b80632cd00d53116101815780632cd00d531461020d5780633231a7f014610222578063343598081461024557600080fd5b806319045a25146101a85780631a47931b146101e5578063254ff981146101fa575b600080fd5b6101bb6101b63660046127d3565b6103fb565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b6101f86101f336600461281a565b61050f565b005b6101f86102083660046128e9565b610895565b61021561096e565b6040516101dc9190612926565b6102356102303660046127d3565b610b76565b60405190151581526020016101dc565b610235610253366004612980565b610bba565b610260610c7c565b6040516101dc93929190612aa9565b6101f861027d3660046128e9565b610d67565b6101bb6102903660046128e9565b610e06565b6101f86102a3366004612980565b610e65565b6102356102b63660046128e9565b6111bf565b6102ce6102c93660046128e9565b6111ea565b6040516101dc9190612b3b565b6101f8611332565b6101f86102f13660046128e9565b611346565b6101f8611508565b609e5415610235565b60335473ffffffffffffffffffffffffffffffffffffffff166101bb565b61032d611672565b6040516101dc9190612b93565b61034d6103483660046128e9565b61174b565b6040516101dc93929190612bad565b61023561036a3660046128e9565b61182e565b609c546101bb9073ffffffffffffffffffffffffffffffffffffffff1681565b61023561039d3660046128e9565b805160208183018101805160a38252928201919093012091525460ff1681565b6101f86103cb366004612beb565b611873565b6103d861190d565b6040516101dc9493929190612c21565b6101f86103f6366004612beb565b611c19565b60008060008061040a85611c68565b92509250925060006001878386866040516000815260200160405260405161044e949392919093845260ff9290921660208401526040830152606082015260800190565b6020604051602081039080840390855afa158015610470573d6000803e3d6000fd5b50506040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0015191505073ffffffffffffffffffffffffffffffffffffffff81166105035760405162461bcd60e51b815260206004820152601060248201527f65637265636f766572206661696c65640000000000000000000000000000000060448201526064015b60405180910390fd5b93505050505b92915050565b610517611cf1565b60008151116105685760405162461bcd60e51b815260206004820152601960248201527f6261746368207075626c6963206b657920697320656d7074790000000000000060448201526064016104fa565b805182106105de5760405162461bcd60e51b815260206004820152602360248201527f7468726573686f6c64206d757374206c657373207468616e20747373206d656d60448201527f626572000000000000000000000000000000000000000000000000000000000060648201526084016104fa565b609e54156107395760005b609e5481101561072c5760a160a0609e838154811061060a5761060a612c5d565b906000526020600020016040516106219190612ce0565b90815260405190819003602001812061063991612ce0565b90815260200160405180910390206000905560a0609e828154811061066057610660612c5d565b906000526020600020016040516106779190612ce0565b90815260200160405180910390206000610691919061253e565b60a2609e82815481106106a6576106a6612c5d565b906000526020600020016040516106bd9190612ce0565b908152604051908190036020019020805460ff19169055609e805460a39190839081106106ec576106ec612c5d565b906000526020600020016040516107039190612ce0565b908152604051908190036020019020805460ff191690558061072481612d81565b9150506105e9565b50610739609e6000612578565b60005b815181101561083957609e82828151811061075957610759612c5d565b6020908102919091018101518254600181018455600093845292829020815161078b9491909101929190910190612596565b50600160a38383815181106107a2576107a2612c5d565b60200260200101516040516107b79190612dba565b908152602001604051809103902060006101000a81548160ff021916908315150217905550600060a28383815181106107f2576107f2612c5d565b60200260200101516040516108079190612dba565b908152604051908190036020019020805491151560ff199092169190911790558061083181612d81565b91505061073c565b506099829055609a5461084d906001612dd6565b609a8190556000609b556040517ffa26843b7ced045dd12994ee0e73c6f0904c3a4608bce58ae304d606035b079e916108899185908590612aa9565b60405180910390a15050565b609c5473ffffffffffffffffffffffffffffffffffffffff1633146109225760405162461bcd60e51b815260206004820152602560248201527f636f6e74726163742063616c6c206973206e6f74207374616b696e6720736c6160448201527f7368696e6700000000000000000000000000000000000000000000000000000060648201526084016104fa565b6001609f826040516109349190612dba565b908152602001604051809103902060010160146101000a81548160ff0219169083600181111561096657610966612ad1565b021790555050565b60606000805b609d54811015610a02576000609f609d838154811061099557610995612c5d565b906000526020600020016040516109ac9190612ce0565b908152602001604051809103902060010160149054906101000a900460ff1660018111156109dc576109dc612ad1565b14156109f057816109ec81612d81565b9250505b806109fa81612d81565b915050610974565b5060008167ffffffffffffffff811115610a1e57610a1e6126c7565b604051908082528060200260200182016040528015610a47578160200160208202803683370190505b5090506000805b609d54811015610b6d576000609f609d8381548110610a6f57610a6f612c5d565b90600052602060002001604051610a869190612ce0565b908152602001604051809103902060010160149054906101000a900460ff166001811115610ab657610ab6612ad1565b1415610b5b57609f609d8281548110610ad157610ad1612c5d565b90600052602060002001604051610ae89190612ce0565b90815260405190819003602001902060010154835173ffffffffffffffffffffffffffffffffffffffff90911690849084908110610b2857610b28612c5d565b73ffffffffffffffffffffffffffffffffffffffff9092166020928302919091019091015281610b5781612d81565b9250505b80610b6581612d81565b915050610a4e565b50909392505050565b60985460009073ffffffffffffffffffffffffffffffffffffffff16610b9c84846103fb565b73ffffffffffffffffffffffffffffffffffffffff16149392505050565b60008151835114610bcd57506000610509565b60005b8351811015610c7257828181518110610beb57610beb612c5d565b602001015160f81c60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916848281518110610c2a57610c2a612c5d565b01602001517fff000000000000000000000000000000000000000000000000000000000000001614610c60576000915050610509565b80610c6a81612d81565b915050610bd0565b5060019392505050565b6000806060609a54609954609e80805480602002602001604051908101604052809291908181526020016000905b82821015610d56578382906000526020600020018054610cc990612c8c565b80601f0160208091040260200160405190810160405280929190818152602001828054610cf590612c8c565b8015610d425780601f10610d1757610100808354040283529160200191610d42565b820191906000526020600020905b815481529060010190602001808311610d2557829003601f168201915b505050505081526020019060010190610caa565b505050509050925092509250909192565b609c5473ffffffffffffffffffffffffffffffffffffffff163314610df45760405162461bcd60e51b815260206004820152602560248201527f636f6e74726163742063616c6c206973206e6f74207374616b696e6720736c6160448201527f7368696e6700000000000000000000000000000000000000000000000000000060648201526084016104fa565b6000609f826040516109349190612dba565b60008151604014610e595760405162461bcd60e51b815260206004820152601f60248201527f7075626c6963206b6579206c656e677468206d7573742036342062797465730060448201526064016104fa565b50805160209091012090565b60a382604051610e759190612dba565b9081526040519081900360200190205460ff161515600114610eff5760405162461bcd60e51b815260206004820152602860248201527f796f7572207075626c6963206b6579206973206e6f7420696e20496e4163746960448201527f76654d656d62657200000000000000000000000000000000000000000000000060648201526084016104fa565b610f0882610e06565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610f825760405162461bcd60e51b815260206004820152601460248201527f7075626c6963206b6579206e6f74206d6174636800000000000000000000000060448201526064016104fa565b60a282604051610f929190612dba565b9081526040519081900360200190205460ff16610fed57600160a283604051610fbb9190612dba565b908152604051908190036020019020805491151560ff19909216919091179055609b54610fe9906001612dd6565b609b555b61109d60a0836040516110009190612dba565b9081526020016040518091039020805461101990612c8c565b80601f016020809104026020016040519081016040528092919081815260200182805461104590612c8c565b80156110925780601f1061106757610100808354040283529160200191611092565b820191906000526020600020905b81548152906001019060200180831161107557829003601f168201915b505050505082610bba565b61118957600160a1826040516110b39190612dba565b908152602001604051809103902060008282546110d09190612dd6565b909155505060405160a0906110e6908490612dba565b908152602001604051809103902080546110ff90612c8c565b15905061115557600160a160a08460405161111a9190612dba565b90815260405190819003602001812061113291612ce0565b9081526020016040518091039020600082825461114f9190612dee565b90915550505b8060a0836040516111669190612dba565b90815260200160405180910390209080519060200190611187929190612596565b505b609e5460405160a19061119d908490612dba565b90815260200160405180910390205414156111bb576111bb81611d58565b5050565b600060a3826040516111d19190612dba565b9081526040519081900360200190205460ff1692915050565b61120b60408051606080820183528152600060208201819052909182015290565b609f8260405161121b9190612dba565b908152602001604051809103902060405180606001604052908160008201805461124490612c8c565b80601f016020809104026020016040519081016040528092919081815260200182805461127090612c8c565b80156112bd5780601f10611292576101008083540402835291602001916112bd565b820191906000526020600020905b8154815290600101906020018083116112a057829003601f168201915b505050918352505060018281015473ffffffffffffffffffffffffffffffffffffffff8116602084015260409092019174010000000000000000000000000000000000000000900460ff169081111561131857611318612ad1565b600181111561132957611329612ad1565b90525092915050565b61133a611cf1565b61134460006122b7565b565b609c5473ffffffffffffffffffffffffffffffffffffffff1633146113d35760405162461bcd60e51b815260206004820152602560248201527f636f6e74726163742063616c6c206973206e6f74207374616b696e6720736c6160448201527f7368696e6700000000000000000000000000000000000000000000000000000060648201526084016104fa565b60005b609d548110156114af5761148f609d82815481106113f6576113f6612c5d565b90600052602060002001805461140b90612c8c565b80601f016020809104026020016040519081016040528092919081815260200182805461143790612c8c565b80156114845780601f1061145957610100808354040283529160200191611484565b820191906000526020600020905b81548152906001019060200180831161146757829003601f168201915b505050505083610bba565b1561149d5761149d8161232e565b806114a781612d81565b9150506113d6565b50609f816040516114c09190612dba565b90815260405190819003602001902060006114db828261253e565b5060010180547fffffffffffffffffffffff00000000000000000000000000000000000000000016905550565b600054610100900460ff16158080156115285750600054600160ff909116105b806115425750303b158015611542575060005460ff166001145b6115b45760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084016104fa565b6000805460ff1916600117905580156115f457600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff166101001790555b6115fc612438565b6000609a819055609b819055609955801561166f57600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498906020015b60405180910390a15b50565b6060609d805480602002602001604051908101604052809291908181526020016000905b828210156117425783829060005260206000200180546116b590612c8c565b80601f01602080910402602001604051908101604052809291908181526020018280546116e190612c8c565b801561172e5780601f106117035761010080835404028352916020019161172e565b820191906000526020600020905b81548152906001019060200180831161171157829003601f168201915b505050505081526020019060010190611696565b50505050905090565b8051602081830181018051609f8252928201919093012091528054819061177190612c8c565b80601f016020809104026020016040519081016040528092919081815260200182805461179d90612c8c565b80156117ea5780601f106117bf576101008083540402835291602001916117ea565b820191906000526020600020905b8154815290600101906020018083116117cd57829003601f168201915b5050506001909301549192505073ffffffffffffffffffffffffffffffffffffffff81169060ff740100000000000000000000000000000000000000009091041683565b600080609f836040516118419190612dba565b908152604051908190036020019020805461185b90612c8c565b9050111561186b57506001919050565b506000919050565b61187b611cf1565b73ffffffffffffffffffffffffffffffffffffffff81166119045760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084016104fa565b61166f816122b7565b609e546000908190606090819015611aa1576001609a5461192e9190612dee565b6099546097609d81805461194190612c8c565b80601f016020809104026020016040519081016040528092919081815260200182805461196d90612c8c565b80156119ba5780601f1061198f576101008083540402835291602001916119ba565b820191906000526020600020905b81548152906001019060200180831161199d57829003601f168201915b5050505050915080805480602002602001604051908101604052809291908181526020016000905b82821015611a8e578382906000526020600020018054611a0190612c8c565b80601f0160208091040260200160405190810160405280929190818152602001828054611a2d90612c8c565b8015611a7a5780601f10611a4f57610100808354040283529160200191611a7a565b820191906000526020600020905b815481529060010190602001808311611a5d57829003601f168201915b5050505050815260200190600101906119e2565b5050505090509350935093509350611c13565b609a546099546097609d818054611ab790612c8c565b80601f0160208091040260200160405190810160405280929190818152602001828054611ae390612c8c565b8015611b305780601f10611b0557610100808354040283529160200191611b30565b820191906000526020600020905b815481529060010190602001808311611b1357829003601f168201915b5050505050915080805480602002602001604051908101604052809291908181526020016000905b82821015611c04578382906000526020600020018054611b7790612c8c565b80601f0160208091040260200160405190810160405280929190818152602001828054611ba390612c8c565b8015611bf05780601f10611bc557610100808354040283529160200191611bf0565b820191906000526020600020905b815481529060010190602001808311611bd357829003601f168201915b505050505081526020019060010190611b58565b50505050905093509350935093505b90919293565b611c21611cf1565b609c80547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b60008060008351604114611cbe5760405162461bcd60e51b815260206004820152601860248201527f696e76616c6964207369676e6174757265206c656e677468000000000000000060448201526064016104fa565b50505060208101516040820151606083015160001a601b811015611cea57611ce7601b82612e05565b90505b9193909250565b60335473ffffffffffffffffffffffffffffffffffffffff1633146113445760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016104fa565b609d5415611dfd5760005b609d54811015611df057609f609d8281548110611d8257611d82612c5d565b90600052602060002001604051611d999190612ce0565b9081526040519081900360200190206000611db4828261253e565b5060010180547fffffffffffffffffffffff00000000000000000000000000000000000000000016905580611de881612d81565b915050611d63565b50611dfd609d6000612578565b60005b609e5481101561221257609d609e8281548110611e1f57611e1f612c5d565b600091825260208083208454600181018655948452922091018054919092019190611e4990612c8c565b611e5492919061261a565b506040518060600160405280609e8381548110611e7357611e73612c5d565b906000526020600020018054611e8890612c8c565b80601f0160208091040260200160405190810160405280929190818152602001828054611eb490612c8c565b8015611f015780601f10611ed657610100808354040283529160200191611f01565b820191906000526020600020905b815481529060010190602001808311611ee457829003601f168201915b50505050508152602001611fb9609e8481548110611f2157611f21612c5d565b906000526020600020018054611f3690612c8c565b80601f0160208091040260200160405190810160405280929190818152602001828054611f6290612c8c565b8015611faf5780601f10611f8457610100808354040283529160200191611faf565b820191906000526020600020905b815481529060010190602001808311611f9257829003601f168201915b5050505050610e06565b73ffffffffffffffffffffffffffffffffffffffff1681526020016000815250609f609e8381548110611fee57611fee612c5d565b906000526020600020016040516120059190612ce0565b9081526020016040518091039020600082015181600001908051906020019061202f929190612596565b5060208201516001808301805473ffffffffffffffffffffffffffffffffffffffff9093167fffffffffffffffffffffffff000000000000000000000000000000000000000084168117825560408601519391927fffffffffffffffffffffff0000000000000000000000000000000000000000009092161790740100000000000000000000000000000000000000009084908111156120d1576120d1612ad1565b021790555090505060a160a0609e83815481106120f0576120f0612c5d565b906000526020600020016040516121079190612ce0565b90815260405190819003602001812061211f91612ce0565b90815260200160405180910390206000905560a0609e828154811061214657612146612c5d565b9060005260206000200160405161215d9190612ce0565b90815260200160405180910390206000612177919061253e565b60a2609e828154811061218c5761218c612c5d565b906000526020600020016040516121a39190612ce0565b908152604051908190036020019020805460ff19169055609e805460a39190839081106121d2576121d2612c5d565b906000526020600020016040516121e99190612ce0565b908152604051908190036020019020805460ff191690558061220a81612d81565b915050611e00565b5061221f609e6000612578565b8051612232906097906020840190612596565b5061223c81610e06565b609880547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055609a546040517f61c7922e50ad7ea3d35879a4a819ae97eb09b665f2113451d7ada7cb2b689b6691611666918490609d90612e2a565b6033805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b609d54811061237f5760405162461bcd60e51b815260206004820152601260248201527f696e646578206f7574206f6620626f756e64000000000000000000000000000060448201526064016104fa565b805b609d5461239090600190612dee565b81101561240557609d6123a4826001612dd6565b815481106123b4576123b4612c5d565b90600052602060002001609d82815481106123d1576123d1612c5d565b906000526020600020019080546123e790612c8c565b6123f292919061261a565b50806123fd81612d81565b915050612381565b50609d80548061241757612417612f2a565b600190038181906000526020600020016000612433919061253e565b905550565b600054610100900460ff166124b55760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e6700000000000000000000000000000000000000000060648201526084016104fa565b611344600054610100900460ff166125355760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e6700000000000000000000000000000000000000000060648201526084016104fa565b611344336122b7565b50805461254a90612c8c565b6000825580601f1061255a575050565b601f01602090049060005260206000209081019061166f9190612695565b508054600082559060005260206000209081019061166f91906126aa565b8280546125a290612c8c565b90600052602060002090601f0160209004810192826125c4576000855561260a565b82601f106125dd57805160ff191683800117855561260a565b8280016001018555821561260a579182015b8281111561260a5782518255916020019190600101906125ef565b50612616929150612695565b5090565b82805461262690612c8c565b90600052602060002090601f016020900481019282612648576000855561260a565b82601f10612659578054855561260a565b8280016001018555821561260a57600052602060002091601f016020900482015b8281111561260a57825482559160010191906001019061267a565b5b808211156126165760008155600101612696565b808211156126165760006126be828261253e565b506001016126aa565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff8111828210171561273d5761273d6126c7565b604052919050565b600082601f83011261275657600080fd5b813567ffffffffffffffff811115612770576127706126c7565b6127a160207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f840116016126f6565b8181528460208386010111156127b657600080fd5b816020850160208301376000918101602001919091529392505050565b600080604083850312156127e657600080fd5b82359150602083013567ffffffffffffffff81111561280457600080fd5b61281085828601612745565b9150509250929050565b6000806040838503121561282d57600080fd5b8235915060208084013567ffffffffffffffff8082111561284d57600080fd5b818601915086601f83011261286157600080fd5b813581811115612873576128736126c7565b8060051b6128828582016126f6565b918252838101850191858101908a84111561289c57600080fd5b86860192505b838310156128d8578235858111156128ba5760008081fd5b6128c88c89838a0101612745565b83525091860191908601906128a2565b809750505050505050509250929050565b6000602082840312156128fb57600080fd5b813567ffffffffffffffff81111561291257600080fd5b61291e84828501612745565b949350505050565b6020808252825182820181905260009190848201906040850190845b8181101561297457835173ffffffffffffffffffffffffffffffffffffffff1683529284019291840191600101612942565b50909695505050505050565b6000806040838503121561299357600080fd5b823567ffffffffffffffff808211156129ab57600080fd5b6129b786838701612745565b935060208501359150808211156129cd57600080fd5b5061281085828601612745565b60005b838110156129f55781810151838201526020016129dd565b83811115612a04576000848401525b50505050565b60008151808452612a228160208601602086016129da565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b600081518084526020808501808196508360051b8101915082860160005b85811015612a9c578284038952612a8a848351612a0a565b98850198935090840190600101612a72565b5091979650505050505050565b838152826020820152606060408201526000612ac86060830184612a54565b95945050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60028110612b37577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b9052565b602081526000825160606020840152612b576080840182612a0a565b905073ffffffffffffffffffffffffffffffffffffffff60208501511660408401526040840151612b8b6060850182612b00565b509392505050565b602081526000612ba66020830184612a54565b9392505050565b606081526000612bc06060830186612a0a565b905073ffffffffffffffffffffffffffffffffffffffff8416602083015261291e6040830184612b00565b600060208284031215612bfd57600080fd5b813573ffffffffffffffffffffffffffffffffffffffff81168114612ba657600080fd5b848152836020820152608060408201526000612c406080830185612a0a565b8281036060840152612c528185612a54565b979650505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600181811c90821680612ca057607f821691505b60208210811415612cda577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b6000808354612cee81612c8c565b60018281168015612d065760018114612d1757612d46565b60ff19841687528287019450612d46565b8760005260208060002060005b85811015612d3d5781548a820152908401908201612d24565b50505082870194505b50929695505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415612db357612db3612d52565b5060010190565b60008251612dcc8184602087016129da565b9190910192915050565b60008219821115612de957612de9612d52565b500190565b600082821015612e0057612e00612d52565b500390565b600060ff821660ff84168060ff03821115612e2257612e22612d52565b019392505050565b83815260006020606081840152612e446060840186612a0a565b83810360408501528085548083528383019150838160051b8401016000888152858120815b84811015612f19577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0878503018652828254612ea481612c8c565b80875260018281168015612ebf5760018114612ed357612f02565b60ff1984168d8a0152604089019450612f02565b8688528c8820885b84811015612efa5781548f828d01015283820191508e81019050612edb565b8a018e019550505b50988b019892965050509190910190600101612e69565b50919b9a5050505050505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fdfea2646970667358221220fd8a9cafd92c9ce475bbe8dbdccaa366ac86a1bf51983175546912b055acee0264736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 138,
        "contract": "contracts/L1/tss/TssGroupManager.sol:TssGroupManager",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 141,
        "contract": "contracts/L1/tss/TssGroupManager.sol:TssGroupManager",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 752,
        "contract": "contracts/L1/tss/TssGroupManager.sol:TssGroupManager",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10,
        "contract": "contracts/L1/tss/TssGroupManager.sol:TssGroupManager",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 130,
        "contract": "contracts/L1/tss/TssGroupManager.sol:TssGroupManager",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 423,
        "contract": "contracts/L1/tss/TssGroupManager.sol:TssGroupManager",
        "label": "_status",
        "offset": 0,
        "slot": "101",
        "type": "t_uint256"
      },
      {
        "astId": 467,
        "contract": "contracts/L1/tss/TssGroupManager.sol:TssGroupManager",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 8095,
        "contract": "contracts/L1/tss/TssGroupManager.sol:TssGroupManager",
        "label": "confirmGroupPublicKey",
        "offset": 0,
        "slot": "151",
        "type": "t_bytes_storage"
      },
      {
        "astId": 8097,
        "contract": "contracts/L1/tss/TssGroupManager.sol:TssGroupManager",
        "label": "confirmGroupAddress",
        "offset": 0,
        "slot": "152",
        "type": "t_address"
      },
      {
        "astId": 8099,
        "contract": "contracts/L1/tss/TssGroupManager.sol:TssGroupManager",
        "label": "threshold",
        "offset": 0,
        "slot": "153",
        "type": "t_uint256"
      },
      {
        "astId": 8101,
        "contract": "contracts/L1/tss/TssGroupManager.sol:TssGroupManager",
        "label": "gRoundId",
        "offset": 0,
        "slot": "154",
        "type": "t_uint256"
      },
      {
        "astId": 8103,
        "contract": "contracts/L1/tss/TssGroupManager.sol:TssGroupManager",
        "label": "confirmNumber",
        "offset": 0,
        "slot": "155",
        "type": "t_uint256"
      },
      {
        "astId": 8105,
        "contract": "contracts/L1/tss/TssGroupManager.sol:TssGroupManager",
        "label": "stakingSlash",
        "offset": 0,
        "slot": "156",
        "type": "t_address"
      },
      {
        "astId": 8108,
        "contract": "contracts/L1/tss/TssGroupManager.sol:TssGroupManager",
        "label": "activeTssMembers",
        "offset": 0,
        "slot": "157",
        "type": "t_array(t_bytes_storage)dyn_storage"
      },
      {
        "astId": 8111,
        "contract": "contracts/L1/tss/TssGroupManager.sol:TssGroupManager",
        "label": "inActiveTssMembers",
        "offset": 0,
        "slot": "158",
        "type": "t_array(t_bytes_storage)dyn_storage"
      },
      {
        "astId": 8116,
        "contract": "contracts/L1/tss/TssGroupManager.sol:TssGroupManager",
        "label": "tssActiveMemberInfo",
        "offset": 0,
        "slot": "159",
        "type": "t_mapping(t_bytes_memory_ptr,t_struct(TssMember)7857_storage)"
      },
      {
        "astId": 8120,
        "contract": "contracts/L1/tss/TssGroupManager.sol:TssGroupManager",
        "label": "memberGroupKey",
        "offset": 0,
        "slot": "160",
        "type": "t_mapping(t_bytes_memory_ptr,t_bytes_storage)"
      },
      {
        "astId": 8124,
        "contract": "contracts/L1/tss/TssGroupManager.sol:TssGroupManager",
        "label": "groupKeyCounter",
        "offset": 0,
        "slot": "161",
        "type": "t_mapping(t_bytes_memory_ptr,t_uint256)"
      },
      {
        "astId": 8128,
        "contract": "contracts/L1/tss/TssGroupManager.sol:TssGroupManager",
        "label": "isSubmitGroupKey",
        "offset": 0,
        "slot": "162",
        "type": "t_mapping(t_bytes_memory_ptr,t_bool)"
      },
      {
        "astId": 8132,
        "contract": "contracts/L1/tss/TssGroupManager.sol:TssGroupManager",
        "label": "isInActiveMember",
        "offset": 0,
        "slot": "163",
        "type": "t_mapping(t_bytes_memory_ptr,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes_storage)dyn_storage": {
        "base": "t_bytes_storage",
        "encoding": "dynamic_array",
        "label": "bytes[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes_memory_ptr": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_enum(MemberStatus)7849": {
        "encoding": "inplace",
        "label": "enum ITssGroupManager.MemberStatus",
        "numberOfBytes": "1"
      },
      "t_mapping(t_bytes_memory_ptr,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes_memory_ptr",
        "label": "mapping(bytes => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes_memory_ptr,t_bytes_storage)": {
        "encoding": "mapping",
        "key": "t_bytes_memory_ptr",
        "label": "mapping(bytes => bytes)",
        "numberOfBytes": "32",
        "value": "t_bytes_storage"
      },
      "t_mapping(t_bytes_memory_ptr,t_struct(TssMember)7857_storage)": {
        "encoding": "mapping",
        "key": "t_bytes_memory_ptr",
        "label": "mapping(bytes => struct ITssGroupManager.TssMember)",
        "numberOfBytes": "32",
        "value": "t_struct(TssMember)7857_storage"
      },
      "t_mapping(t_bytes_memory_ptr,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes_memory_ptr",
        "label": "mapping(bytes => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(TssMember)7857_storage": {
        "encoding": "inplace",
        "label": "struct ITssGroupManager.TssMember",
        "members": [
          {
            "astId": 7851,
            "contract": "contracts/L1/tss/TssGroupManager.sol:TssGroupManager",
            "label": "publicKey",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes_storage"
          },
          {
            "astId": 7853,
            "contract": "contracts/L1/tss/TssGroupManager.sol:TssGroupManager",
            "label": "nodeAddress",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 7856,
            "contract": "contracts/L1/tss/TssGroupManager.sol:TssGroupManager",
            "label": "status",
            "offset": 20,
            "slot": "1",
            "type": "t_enum(MemberStatus)7849"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}