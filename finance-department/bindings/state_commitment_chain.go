// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package bindings

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// LibBVMCodecChainBatchHeader is an auto generated low-level Go binding around an user-defined struct.
type LibBVMCodecChainBatchHeader struct {
	BatchIndex        *big.Int
	BatchRoot         [32]byte
	BatchSize         *big.Int
	PrevTotalElements *big.Int
	Signature         []byte
	ExtraData         []byte
}

// LibBVMCodecChainInclusionProof is an auto generated low-level Go binding around an user-defined struct.
type LibBVMCodecChainInclusionProof struct {
	Index    *big.Int
	Siblings [][32]byte
}

// StateCommitmentChainMetaData contains all meta data concerning the StateCommitmentChain contract.
var StateCommitmentChainMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_libAddressManager\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_fraudProofWindow\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sequencerPublishWindow\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_startBlockNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_length\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"_tssMembers\",\"type\":\"address[]\"}],\"name\":\"DistributeTssReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_batchIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_batchRoot\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_batchSize\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_prevTotalElements\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"StateBatchAppended\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_batchIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_batchRoot\",\"type\":\"bytes32\"}],\"name\":\"StateBatchDeleted\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"FRAUD_PROOF_WINDOW\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SEQUENCER_PUBLISH_WINDOW\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"_batch\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256\",\"name\":\"_shouldStartAtElement\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"appendStateBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"batches\",\"outputs\":[{\"internalType\":\"contractIChainStorageContainer\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"batchIndex\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"batchRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"batchSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"prevTotalElements\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"extraData\",\"type\":\"bytes\"}],\"internalType\":\"structLib_BVMCodec.ChainBatchHeader\",\"name\":\"_batchHeader\",\"type\":\"tuple\"}],\"name\":\"deleteStateBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastSequencerTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_lastSequencerTimestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalBatches\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_totalBatches\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalElements\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_totalElements\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"batchIndex\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"batchRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"batchSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"prevTotalElements\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"extraData\",\"type\":\"bytes\"}],\"internalType\":\"structLib_BVMCodec.ChainBatchHeader\",\"name\":\"_batchHeader\",\"type\":\"tuple\"}],\"name\":\"insideFraudProofWindow\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_inside\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"libAddressManager\",\"outputs\":[{\"internalType\":\"contractLib_AddressManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"messenger\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"resolve\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_element\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"batchIndex\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"batchRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"batchSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"prevTotalElements\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"extraData\",\"type\":\"bytes\"}],\"internalType\":\"structLib_BVMCodec.ChainBatchHeader\",\"name\":\"_batchHeader\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"siblings\",\"type\":\"bytes32[]\"}],\"internalType\":\"structLib_BVMCodec.ChainInclusionProof\",\"name\":\"_proof\",\"type\":\"tuple\"}],\"name\":\"verifyStateCommitment\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "0x60806040523480156200001157600080fd5b506040516200392a3803806200392a833981810160405281019062000037919062000179565b600083806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550508160028190555080600381905550505050620001d5565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200010682620000d9565b9050919050565b6200011881620000f9565b81146200012457600080fd5b50565b60008151905062000138816200010d565b92915050565b6000819050919050565b62000153816200013e565b81146200015f57600080fd5b50565b600081519050620001738162000148565b92915050565b600080600060608486031215620001955762000194620000d4565b5b6000620001a58682870162000127565b9350506020620001b88682870162000162565b9250506040620001cb8682870162000162565b9150509250925092565b61374580620001e56000396000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c80637ad168a01161008c578063b768bb1711610066578063b768bb1714610202578063c17b291b14610232578063cfdf677e14610250578063e561dddc1461026e576100cf565b80637ad168a01461019657806381eb62ef146101b457806389a1d980146101d2576100cf565b80632169f79f146100d4578063299ca478146100f05780633cb747bf1461010e578063461a44781461012c5780635b4d90e21461015c5780637aa63a8614610178575b600080fd5b6100ee60048036038101906100e99190611d84565b61028c565b005b6100f8610574565b6040516101059190611e8e565b60405180910390f35b610116610598565b6040516101239190611eca565b60405180910390f35b61014660048036038101906101419190611f86565b6105be565b6040516101539190611eca565b60405180910390f35b610176600480360381019061017191906120b1565b610671565b005b6101806107b8565b60405161018d9190612109565b60405180910390f35b61019e6107d4565b6040516101ab9190612109565b60405180910390f35b6101bc6107f0565b6040516101c99190612109565b60405180910390f35b6101ec60048036038101906101e791906120b1565b6107f6565b6040516101f9919061213f565b60405180910390f35b61021c600480360381019061021791906121c6565b610870565b604051610229919061213f565b60405180910390f35b61023a610921565b6040516102479190612109565b60405180910390f35b610258610927565b6040516102659190612272565b60405180910390f35b61027661094f565b6040516102839190612109565b60405180910390f35b6102946107b8565b82146102d5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102cc90612310565b60405180910390fd5b6103136040518060400160405280600b81526020017f426f6e644d616e616765720000000000000000000000000000000000000000008152506105be565b73ffffffffffffffffffffffffffffffffffffffff166302ad4d2a336040518263ffffffff1660e01b815260040161034b9190611eca565b60206040518083038186803b15801561036357600080fd5b505afa158015610377573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061039b919061235c565b6103da576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103d1906123fb565b60405180910390fd5b600083511161041e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104159061248d565b60405180910390fd5b61045c6040518060400160405280601981526020017f43616e6f6e6963616c5472616e73616374696f6e436861696e000000000000008152506105be565b73ffffffffffffffffffffffffffffffffffffffff16637aa63a866040518163ffffffff1660e01b815260040160206040518083038186803b1580156104a157600080fd5b505afa1580156104b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104d991906124c2565b83516104e36107b8565b6104ed919061251e565b111561052e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105259061260c565b60405180910390fd5b6105398383836109db565b6105658382423360405160200161055192919061262c565b604051602081830303815290604052610b11565b61056f8383610d36565b505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663bf40fac1836040518263ffffffff1660e01b815260040161061a91906126cc565b60206040518083038186803b15801561063257600080fd5b505afa158015610646573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061066a919061271a565b9050919050565b6106af6040518060400160405280601181526020017f42564d5f467261756456657269666965720000000000000000000000000000008152506105be565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461071c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610713906127b9565b60405180910390fd5b61072581610f22565b610764576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161075b90612825565b60405180910390fd5b61076d816107f6565b6107ac576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107a3906128b7565b60405180910390fd5b6107b581610fc9565b50565b6000806107c36111a4565b5090508064ffffffffff1691505090565b6000806107df6111a4565b9150508064ffffffffff1691505090565b60035481565b6000808260a001518060200190518101906108119190612915565b5090506000811415610858576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161084f906129c7565b60405180910390fd5b4260025482610867919061251e565b11915050919050565b600061087b83610f22565b6108ba576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108b190612825565b60405180910390fd5b6108d7836020015185846000015185602001518760400151611278565b610916576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161090d90612a33565b60405180910390fd5b600190509392505050565b60025481565b600061094a6040518060600160405280602181526020016136ef602191396105be565b905090565b6000610959610927565b73ffffffffffffffffffffffffffffffffffffffff16631f7b6d326040518163ffffffff1660e01b815260040160206040518083038186803b15801561099e57600080fd5b505afa1580156109b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109d691906124c2565b905090565b610a196040518060400160405280600f81526020017f54737347726f75704d616e6167657200000000000000000000000000000000008152506105be565b73ffffffffffffffffffffffffffffffffffffffff16633231a7f08484604051602001610a47929190612b11565b60405160208183030381529060405280519060200120836040518363ffffffff1660e01b8152600401610a7b929190612ba5565b602060405180830381600087803b158015610a9557600080fd5b505af1158015610aa9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610acd919061235c565b610b0c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b0390612c21565b60405180910390fd5b505050565b6000610b516040518060400160405280600c81526020017f42564d5f50726f706f73657200000000000000000000000000000000000000008152506105be565b9050600080610b5e6111a4565b915091508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415610b9e57429050610bf5565b426003548264ffffffffff16610bb4919061251e565b10610bf4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610beb90612cd9565b60405180910390fd5b5b60006040518060c00160405280610c0a61094f565b8152602001610c188961141f565b8152602001885181526020018464ffffffffff16815260200187815260200186815250905080600001517f9cf3ad24eae3fd6d461e2f566b35b95b6d671871d9fcb45f8ac8030e4a8d21b382602001518360400151846060015185608001518660a00151604051610c8d959493929190612cf9565b60405180910390a2610c9d610927565b73ffffffffffffffffffffffffffffffffffffffff16632015276c610cc183611917565b610cde84604001518560600151610cd8919061251e565b86611963565b6040518363ffffffff1660e01b8152600401610cfb929190612d95565b600060405180830381600087803b158015610d1557600080fd5b505af1158015610d29573d6000803e3d6000fd5b5050505050505050505050565b6000610d766040518060400160405280600f81526020017f54737347726f75704d616e6167657200000000000000000000000000000000008152506105be565b73ffffffffffffffffffffffffffffffffffffffff16632cd00d536040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610dbd57600080fd5b505af1158015610dd1573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610dfa9190612e81565b90506000815111610e40576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e3790612f16565b60405180910390fd5b600063e04f6e3560e01b83855184604051602401610e6093929190612ff4565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050509050610ee173420000000000000000000000000000000000002062030d4083611981565b827ff630cba6d450d736e85735388d4fe67a177b8a3685cdd7dee2bea7727b47860a855184604051610f14929190613032565b60405180910390a250505050565b6000610f2c610927565b73ffffffffffffffffffffffffffffffffffffffff16639507d39a83600001516040518263ffffffff1660e01b8152600401610f689190612109565b60206040518083038186803b158015610f8057600080fd5b505afa158015610f94573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fb89190613077565b610fc183611917565b149050919050565b610fd1610927565b73ffffffffffffffffffffffffffffffffffffffff16631f7b6d326040518163ffffffff1660e01b815260040160206040518083038186803b15801561101657600080fd5b505afa15801561102a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061104e91906124c2565b816000015110611093576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161108a906130f0565b60405180910390fd5b61109c81610f22565b6110db576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110d290612825565b60405180910390fd5b6110e3610927565b73ffffffffffffffffffffffffffffffffffffffff1663167fd681826000015161111284606001516000611963565b6040518363ffffffff1660e01b815260040161112f929190613110565b600060405180830381600087803b15801561114957600080fd5b505af115801561115d573d6000803e3d6000fd5b5050505080600001517f8747b69ce8fdb31c3b9b0a67bd8049ad8c1a69ea417b69b12174068abd9cbd6482602001516040516111999190613139565b60405180910390a250565b60008060006111b1610927565b73ffffffffffffffffffffffffffffffffffffffff1663ccf8f9696040518163ffffffff1660e01b815260040160206040518083038186803b1580156111f657600080fd5b505afa15801561120a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061122e9190613180565b90506000808260281c925064ffffffffff831691507fffffffffffffffffffffffffffffffffffffffffffffffffffffff0000000000831660281c90508181945094505050509091565b60008082116112bc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112b39061321f565b60405180910390fd5b8184106112fe576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112f5906132b1565b60405180910390fd5b611307826119fc565b835114611349576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161134090613369565b60405180910390fd5b600085905060005b845181101561140f57600180871614156113af5784818151811061137857611377613389565b5b6020026020010151826040516020016113929291906133d9565b6040516020818303038152906040528051906020012091506113f5565b818582815181106113c3576113c2613389565b5b60200260200101516040516020016113dc9291906133d9565b6040516020818303038152906040528051906020012091505b600186901c9550808061140790613405565b915050611351565b5080871491505095945050505050565b600080825111611464576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161145b906134c0565b60405180910390fd5b600182511415611491578160008151811061148257611481613389565b5b60200260200101519050611912565b60006040518061020001604052807f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e56381526020017f633dc4d7da7256660a892f8f1604a44b5432649cc8ec5cb3ced4c4e6ac94dd1d81526020017f890740a8eb06ce9be422cb8da5cdafc2b58c0a5e24036c578de2a433c828ff7d81526020017f3b8ec09e026fdc305365dfc94e189a81b38c7597b3d941c279f042e8206e0bd881526020017fecd50eee38e386bd62be9bedb990706951b65fe053bd9d8a521af753d139e2da81526020017fdefff6d330bb5403f63b14f33b578274160de3a50df4efecf0e0db73bcdd3da581526020017f617bdd11f7c0a11f49db22f629387a12da7596f9d1704d7465177c63d88ec7d781526020017f292c23a9aa1d8bea7e2435e555a4a60e379a5a35f3f452bae60121073fb6eead81526020017fe1cea92ed99acdcb045a6726b2f87107e8a61620a232cf4d7d5b5766b3952e1081526020017f7ad66c0a68c72cb89e4fb4303841966e4062a76ab97451e3b9fb526a5ceb7f8281526020017fe026cc5a4aed3c22a58cbd3d2ac754c9352c5436f638042dca99034e8363651681526020017f3d04cffd8b46a874edf5cfae63077de85f849a660426697b06a829c70dd1409c81526020017fad676aa337a485e4728a0b240d92b3ef7b3c372d06d189322bfd5f61f1e7203e81526020017fa2fca4a49658f9fab7aa63289c91b7c7b6c832a6d0e69334ff5b0a3483d09dab81526020017f4ebfd9cd7bca2505f7bef59cc1c12ecc708fff26ae4af19abe852afe9e20c86281526020017f2def10d13dd169f550f578bda343d9717a138562e0093b380a1120789d53cf1081525090506000604067ffffffffffffffff81111561171c5761171b611b20565b5b6040519080825280601f01601f19166020018201604052801561174e5781602001600182028036833780820191505090505b509050600080600086519050600080805b60018411156118eb57600284611775919061350f565b915060016002856117869190613540565b14905060005b82811015611838578a8160026117a29190613571565b815181106117b3576117b2613389565b5b602002602001015196508a60018260026117cd9190613571565b6117d7919061251e565b815181106117e8576117e7613389565b5b6020026020010151955086602089015285604089015287805190602001208b828151811061181957611818613389565b5b602002602001018181525050808061183090613405565b91505061178c565b5080156118b9578960018561184d91906135cb565b8151811061185e5761185d613389565b5b6020026020010151955087836010811061187b5761187a613389565b5b602002015160001b945085602088015284604088015286805190602001208a83815181106118ac576118ab613389565b5b6020026020010181815250505b806118c55760006118c8565b60015b60ff16826118d6919061251e565b935082806118e390613405565b93505061175f565b896000815181106118ff576118fe613389565b5b6020026020010151985050505050505050505b919050565b600081602001518260400151836060015184608001518560a00151604051602001611946959493929190612cf9565b604051602081830303815290604052805190602001209050919050565b6000808390508260281b811790508060281b90508091505092915050565b611989611acc565b73ffffffffffffffffffffffffffffffffffffffff16633dbb202b8483856040518463ffffffff1660e01b81526004016119c59392919061361e565b600060405180830381600087803b1580156119df57600080fd5b505af11580156119f3573d6000803e3d6000fd5b50505050505050565b6000808211611a40576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a37906136ce565b60405180910390fd5b6001821415611a525760009050611ac7565b6000829050600080608090505b60018110611aa5576000816001836001901b611a7b91906135cb565b901b841614611a99578082611a90919061251e565b91508083901c92505b600181901c9050611a5f565b5083816001901b14611ac157600181611abe919061251e565b90505b80925050505b919050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000604051905090565b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b611b5882611b0f565b810181811067ffffffffffffffff82111715611b7757611b76611b20565b5b80604052505050565b6000611b8a611af6565b9050611b968282611b4f565b919050565b600067ffffffffffffffff821115611bb657611bb5611b20565b5b602082029050602081019050919050565b600080fd5b6000819050919050565b611bdf81611bcc565b8114611bea57600080fd5b50565b600081359050611bfc81611bd6565b92915050565b6000611c15611c1084611b9b565b611b80565b90508083825260208201905060208402830185811115611c3857611c37611bc7565b5b835b81811015611c615780611c4d8882611bed565b845260208401935050602081019050611c3a565b5050509392505050565b600082601f830112611c8057611c7f611b0a565b5b8135611c90848260208601611c02565b91505092915050565b6000819050919050565b611cac81611c99565b8114611cb757600080fd5b50565b600081359050611cc981611ca3565b92915050565b600080fd5b600067ffffffffffffffff821115611cef57611cee611b20565b5b611cf882611b0f565b9050602081019050919050565b82818337600083830152505050565b6000611d27611d2284611cd4565b611b80565b905082815260208101848484011115611d4357611d42611ccf565b5b611d4e848285611d05565b509392505050565b600082601f830112611d6b57611d6a611b0a565b5b8135611d7b848260208601611d14565b91505092915050565b600080600060608486031215611d9d57611d9c611b00565b5b600084013567ffffffffffffffff811115611dbb57611dba611b05565b5b611dc786828701611c6b565b9350506020611dd886828701611cba565b925050604084013567ffffffffffffffff811115611df957611df8611b05565b5b611e0586828701611d56565b9150509250925092565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000611e54611e4f611e4a84611e0f565b611e2f565b611e0f565b9050919050565b6000611e6682611e39565b9050919050565b6000611e7882611e5b565b9050919050565b611e8881611e6d565b82525050565b6000602082019050611ea36000830184611e7f565b92915050565b6000611eb482611e0f565b9050919050565b611ec481611ea9565b82525050565b6000602082019050611edf6000830184611ebb565b92915050565b600067ffffffffffffffff821115611f0057611eff611b20565b5b611f0982611b0f565b9050602081019050919050565b6000611f29611f2484611ee5565b611b80565b905082815260208101848484011115611f4557611f44611ccf565b5b611f50848285611d05565b509392505050565b600082601f830112611f6d57611f6c611b0a565b5b8135611f7d848260208601611f16565b91505092915050565b600060208284031215611f9c57611f9b611b00565b5b600082013567ffffffffffffffff811115611fba57611fb9611b05565b5b611fc684828501611f58565b91505092915050565b600080fd5b600080fd5b600060c08284031215611fef57611fee611fcf565b5b611ff960c0611b80565b9050600061200984828501611cba565b600083015250602061201d84828501611bed565b602083015250604061203184828501611cba565b604083015250606061204584828501611cba565b606083015250608082013567ffffffffffffffff81111561206957612068611fd4565b5b61207584828501611d56565b60808301525060a082013567ffffffffffffffff81111561209957612098611fd4565b5b6120a584828501611d56565b60a08301525092915050565b6000602082840312156120c7576120c6611b00565b5b600082013567ffffffffffffffff8111156120e5576120e4611b05565b5b6120f184828501611fd9565b91505092915050565b61210381611c99565b82525050565b600060208201905061211e60008301846120fa565b92915050565b60008115159050919050565b61213981612124565b82525050565b60006020820190506121546000830184612130565b92915050565b6000604082840312156121705761216f611fcf565b5b61217a6040611b80565b9050600061218a84828501611cba565b600083015250602082013567ffffffffffffffff8111156121ae576121ad611fd4565b5b6121ba84828501611c6b565b60208301525092915050565b6000806000606084860312156121df576121de611b00565b5b60006121ed86828701611bed565b935050602084013567ffffffffffffffff81111561220e5761220d611b05565b5b61221a86828701611fd9565b925050604084013567ffffffffffffffff81111561223b5761223a611b05565b5b6122478682870161215a565b9150509250925092565b600061225c82611e5b565b9050919050565b61226c81612251565b82525050565b60006020820190506122876000830184612263565b92915050565b600082825260208201905092915050565b7f41637475616c20626174636820737461727420696e64657820646f6573206e6f60008201527f74206d6174636820657870656374656420737461727420696e6465782e000000602082015250565b60006122fa603d8361228d565b91506123058261229e565b604082019050919050565b60006020820190508181036000830152612329816122ed565b9050919050565b61233981612124565b811461234457600080fd5b50565b60008151905061235681612330565b92915050565b60006020828403121561237257612371611b00565b5b600061238084828501612347565b91505092915050565b7f50726f706f73657220646f6573206e6f74206861766520656e6f75676820636f60008201527f6c6c61746572616c20706f737465640000000000000000000000000000000000602082015250565b60006123e5602f8361228d565b91506123f082612389565b604082019050919050565b60006020820190508181036000830152612414816123d8565b9050919050565b7f43616e6e6f74207375626d697420616e20656d7074792073746174652062617460008201527f63682e0000000000000000000000000000000000000000000000000000000000602082015250565b600061247760238361228d565b91506124828261241b565b604082019050919050565b600060208201905081810360008301526124a68161246a565b9050919050565b6000815190506124bc81611ca3565b92915050565b6000602082840312156124d8576124d7611b00565b5b60006124e6848285016124ad565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061252982611c99565b915061253483611c99565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115612569576125686124ef565b5b828201905092915050565b7f4e756d626572206f6620737461746520726f6f74732063616e6e6f742065786360008201527f65656420746865206e756d626572206f662063616e6f6e6963616c207472616e60208201527f73616374696f6e732e0000000000000000000000000000000000000000000000604082015250565b60006125f660498361228d565b915061260182612574565b606082019050919050565b60006020820190508181036000830152612625816125e9565b9050919050565b600060408201905061264160008301856120fa565b61264e6020830184611ebb565b9392505050565b600081519050919050565b60005b8381101561267e578082015181840152602081019050612663565b8381111561268d576000848401525b50505050565b600061269e82612655565b6126a8818561228d565b93506126b8818560208601612660565b6126c181611b0f565b840191505092915050565b600060208201905081810360008301526126e68184612693565b905092915050565b6126f781611ea9565b811461270257600080fd5b50565b600081519050612714816126ee565b92915050565b6000602082840312156127305761272f611b00565b5b600061273e84828501612705565b91505092915050565b7f537461746520626174636865732063616e206f6e6c792062652064656c65746560008201527f64206279207468652042564d5f467261756456657269666965722e0000000000602082015250565b60006127a3603b8361228d565b91506127ae82612747565b604082019050919050565b600060208201905081810360008301526127d281612796565b9050919050565b7f496e76616c6964206261746368206865616465722e0000000000000000000000600082015250565b600061280f60158361228d565b915061281a826127d9565b602082019050919050565b6000602082019050818103600083015261283e81612802565b9050919050565b7f537461746520626174636865732063616e206f6e6c792062652064656c65746560008201527f642077697468696e207468652066726175642070726f6f662077696e646f772e602082015250565b60006128a160408361228d565b91506128ac82612845565b604082019050919050565b600060208201905081810360008301526128d081612894565b9050919050565b60006128e282611e0f565b9050919050565b6128f2816128d7565b81146128fd57600080fd5b50565b60008151905061290f816128e9565b92915050565b6000806040838503121561292c5761292b611b00565b5b600061293a858286016124ad565b925050602061294b85828601612900565b9150509250929050565b7f4261746368206865616465722074696d657374616d702063616e6e6f7420626560008201527f207a65726f000000000000000000000000000000000000000000000000000000602082015250565b60006129b160258361228d565b91506129bc82612955565b604082019050919050565b600060208201905081810360008301526129e0816129a4565b9050919050565b7f496e76616c696420696e636c7573696f6e2070726f6f662e0000000000000000600082015250565b6000612a1d60188361228d565b9150612a28826129e7565b602082019050919050565b60006020820190508181036000830152612a4c81612a10565b9050919050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b612a8881611bcc565b82525050565b6000612a9a8383612a7f565b60208301905092915050565b6000602082019050919050565b6000612abe82612a53565b612ac88185612a5e565b9350612ad383612a6f565b8060005b83811015612b04578151612aeb8882612a8e565b9750612af683612aa6565b925050600181019050612ad7565b5085935050505092915050565b60006040820190508181036000830152612b2b8185612ab3565b9050612b3a60208301846120fa565b9392505050565b612b4a81611bcc565b82525050565b600081519050919050565b600082825260208201905092915050565b6000612b7782612b50565b612b818185612b5b565b9350612b91818560208601612660565b612b9a81611b0f565b840191505092915050565b6000604082019050612bba6000830185612b41565b8181036020830152612bcc8184612b6c565b90509392505050565b7f766572696679207369676e6174757265206661696c6564000000000000000000600082015250565b6000612c0b60178361228d565b9150612c1682612bd5565b602082019050919050565b60006020820190508181036000830152612c3a81612bfe565b9050919050565b7f43616e6e6f74207075626c69736820737461746520726f6f747320776974686960008201527f6e207468652073657175656e636572207075626c69636174696f6e2077696e6460208201527f6f772e0000000000000000000000000000000000000000000000000000000000604082015250565b6000612cc360438361228d565b9150612cce82612c41565b606082019050919050565b60006020820190508181036000830152612cf281612cb6565b9050919050565b600060a082019050612d0e6000830188612b41565b612d1b60208301876120fa565b612d2860408301866120fa565b8181036060830152612d3a8185612b6c565b90508181036080830152612d4e8184612b6c565b90509695505050505050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffff000000000082169050919050565b612d8f81612d5a565b82525050565b6000604082019050612daa6000830185612b41565b612db76020830184612d86565b9392505050565b600067ffffffffffffffff821115612dd957612dd8611b20565b5b602082029050602081019050919050565b6000612dfd612df884612dbe565b611b80565b90508083825260208201905060208402830185811115612e2057612e1f611bc7565b5b835b81811015612e495780612e358882612705565b845260208401935050602081019050612e22565b5050509392505050565b600082601f830112612e6857612e67611b0a565b5b8151612e78848260208601612dea565b91505092915050565b600060208284031215612e9757612e96611b00565b5b600082015167ffffffffffffffff811115612eb557612eb4611b05565b5b612ec184828501612e53565b91505092915050565b7f67657420747373206d656d6265727320696e206572726f720000000000000000600082015250565b6000612f0060188361228d565b9150612f0b82612eca565b602082019050919050565b60006020820190508181036000830152612f2f81612ef3565b9050919050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b612f6b81611ea9565b82525050565b6000612f7d8383612f62565b60208301905092915050565b6000602082019050919050565b6000612fa182612f36565b612fab8185612f41565b9350612fb683612f52565b8060005b83811015612fe7578151612fce8882612f71565b9750612fd983612f89565b925050600181019050612fba565b5085935050505092915050565b600060608201905061300960008301866120fa565b61301660208301856120fa565b81810360408301526130288184612f96565b9050949350505050565b600060408201905061304760008301856120fa565b81810360208301526130598184612f96565b90509392505050565b60008151905061307181611bd6565b92915050565b60006020828403121561308d5761308c611b00565b5b600061309b84828501613062565b91505092915050565b7f496e76616c696420626174636820696e6465782e000000000000000000000000600082015250565b60006130da60148361228d565b91506130e5826130a4565b602082019050919050565b60006020820190508181036000830152613109816130cd565b9050919050565b600060408201905061312560008301856120fa565b6131326020830184612d86565b9392505050565b600060208201905061314e6000830184612b41565b92915050565b61315d81612d5a565b811461316857600080fd5b50565b60008151905061317a81613154565b92915050565b60006020828403121561319657613195611b00565b5b60006131a48482850161316b565b91505092915050565b7f4c69625f4d65726b6c65547265653a20546f74616c206c6561766573206d757360008201527f742062652067726561746572207468616e207a65726f2e000000000000000000602082015250565b600061320960378361228d565b9150613214826131ad565b604082019050919050565b60006020820190508181036000830152613238816131fc565b9050919050565b7f4c69625f4d65726b6c65547265653a20496e646578206f7574206f6620626f7560008201527f6e64732e00000000000000000000000000000000000000000000000000000000602082015250565b600061329b60248361228d565b91506132a68261323f565b604082019050919050565b600060208201905081810360008301526132ca8161328e565b9050919050565b7f4c69625f4d65726b6c65547265653a20546f74616c207369626c696e6773206460008201527f6f6573206e6f7420636f72726563746c7920636f72726573706f6e6420746f2060208201527f746f74616c206c65617665732e00000000000000000000000000000000000000604082015250565b6000613353604d8361228d565b915061335e826132d1565b606082019050919050565b6000602082019050818103600083015261338281613346565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000819050919050565b6133d36133ce82611bcc565b6133b8565b82525050565b60006133e582856133c2565b6020820191506133f582846133c2565b6020820191508190509392505050565b600061341082611c99565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415613443576134426124ef565b5b600182019050919050565b7f4c69625f4d65726b6c65547265653a204d7573742070726f766964652061742060008201527f6c65617374206f6e65206c65616620686173682e000000000000000000000000602082015250565b60006134aa60348361228d565b91506134b58261344e565b604082019050919050565b600060208201905081810360008301526134d98161349d565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061351a82611c99565b915061352583611c99565b925082613535576135346134e0565b5b828204905092915050565b600061354b82611c99565b915061355683611c99565b925082613566576135656134e0565b5b828206905092915050565b600061357c82611c99565b915061358783611c99565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156135c0576135bf6124ef565b5b828202905092915050565b60006135d682611c99565b91506135e183611c99565b9250828210156135f4576135f36124ef565b5b828203905092915050565b600063ffffffff82169050919050565b613618816135ff565b82525050565b60006060820190506136336000830186611ebb565b81810360208301526136458185612b6c565b9050613654604083018461360f565b949350505050565b7f4c69625f4d65726b6c65547265653a2043616e6e6f7420636f6d70757465206360008201527f65696c286c6f675f3229206f6620302e00000000000000000000000000000000602082015250565b60006136b860308361228d565b91506136c38261365c565b604082019050919050565b600060208201905081810360008301526136e7816136ab565b905091905056fe436861696e53746f72616765436f6e7461696e65722d5343432d62617463686573a26469706673582212208db56d84ff406a285aebc0786b5b59acf3b438b439f1468446d0bad2cd95a0f364736f6c63430008090033",
}

// StateCommitmentChainABI is the input ABI used to generate the binding from.
// Deprecated: Use StateCommitmentChainMetaData.ABI instead.
var StateCommitmentChainABI = StateCommitmentChainMetaData.ABI

// StateCommitmentChainBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use StateCommitmentChainMetaData.Bin instead.
var StateCommitmentChainBin = StateCommitmentChainMetaData.Bin

// DeployStateCommitmentChain deploys a new Ethereum contract, binding an instance of StateCommitmentChain to it.
func DeployStateCommitmentChain(auth *bind.TransactOpts, backend bind.ContractBackend, _libAddressManager common.Address, _fraudProofWindow *big.Int, _sequencerPublishWindow *big.Int) (common.Address, *types.Transaction, *StateCommitmentChain, error) {
	parsed, err := StateCommitmentChainMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(StateCommitmentChainBin), backend, _libAddressManager, _fraudProofWindow, _sequencerPublishWindow)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &StateCommitmentChain{StateCommitmentChainCaller: StateCommitmentChainCaller{contract: contract}, StateCommitmentChainTransactor: StateCommitmentChainTransactor{contract: contract}, StateCommitmentChainFilterer: StateCommitmentChainFilterer{contract: contract}}, nil
}

// StateCommitmentChain is an auto generated Go binding around an Ethereum contract.
type StateCommitmentChain struct {
	StateCommitmentChainCaller     // Read-only binding to the contract
	StateCommitmentChainTransactor // Write-only binding to the contract
	StateCommitmentChainFilterer   // Log filterer for contract events
}

// StateCommitmentChainCaller is an auto generated read-only Go binding around an Ethereum contract.
type StateCommitmentChainCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StateCommitmentChainTransactor is an auto generated write-only Go binding around an Ethereum contract.
type StateCommitmentChainTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StateCommitmentChainFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type StateCommitmentChainFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StateCommitmentChainSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type StateCommitmentChainSession struct {
	Contract     *StateCommitmentChain // Generic contract binding to set the session for
	CallOpts     bind.CallOpts         // Call options to use throughout this session
	TransactOpts bind.TransactOpts     // Transaction auth options to use throughout this session
}

// StateCommitmentChainCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type StateCommitmentChainCallerSession struct {
	Contract *StateCommitmentChainCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts               // Call options to use throughout this session
}

// StateCommitmentChainTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type StateCommitmentChainTransactorSession struct {
	Contract     *StateCommitmentChainTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts               // Transaction auth options to use throughout this session
}

// StateCommitmentChainRaw is an auto generated low-level Go binding around an Ethereum contract.
type StateCommitmentChainRaw struct {
	Contract *StateCommitmentChain // Generic contract binding to access the raw methods on
}

// StateCommitmentChainCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type StateCommitmentChainCallerRaw struct {
	Contract *StateCommitmentChainCaller // Generic read-only contract binding to access the raw methods on
}

// StateCommitmentChainTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type StateCommitmentChainTransactorRaw struct {
	Contract *StateCommitmentChainTransactor // Generic write-only contract binding to access the raw methods on
}

// NewStateCommitmentChain creates a new instance of StateCommitmentChain, bound to a specific deployed contract.
func NewStateCommitmentChain(address common.Address, backend bind.ContractBackend) (*StateCommitmentChain, error) {
	contract, err := bindStateCommitmentChain(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &StateCommitmentChain{StateCommitmentChainCaller: StateCommitmentChainCaller{contract: contract}, StateCommitmentChainTransactor: StateCommitmentChainTransactor{contract: contract}, StateCommitmentChainFilterer: StateCommitmentChainFilterer{contract: contract}}, nil
}

// NewStateCommitmentChainCaller creates a new read-only instance of StateCommitmentChain, bound to a specific deployed contract.
func NewStateCommitmentChainCaller(address common.Address, caller bind.ContractCaller) (*StateCommitmentChainCaller, error) {
	contract, err := bindStateCommitmentChain(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &StateCommitmentChainCaller{contract: contract}, nil
}

// NewStateCommitmentChainTransactor creates a new write-only instance of StateCommitmentChain, bound to a specific deployed contract.
func NewStateCommitmentChainTransactor(address common.Address, transactor bind.ContractTransactor) (*StateCommitmentChainTransactor, error) {
	contract, err := bindStateCommitmentChain(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &StateCommitmentChainTransactor{contract: contract}, nil
}

// NewStateCommitmentChainFilterer creates a new log filterer instance of StateCommitmentChain, bound to a specific deployed contract.
func NewStateCommitmentChainFilterer(address common.Address, filterer bind.ContractFilterer) (*StateCommitmentChainFilterer, error) {
	contract, err := bindStateCommitmentChain(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &StateCommitmentChainFilterer{contract: contract}, nil
}

// bindStateCommitmentChain binds a generic wrapper to an already deployed contract.
func bindStateCommitmentChain(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(StateCommitmentChainABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_StateCommitmentChain *StateCommitmentChainRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _StateCommitmentChain.Contract.StateCommitmentChainCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_StateCommitmentChain *StateCommitmentChainRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _StateCommitmentChain.Contract.StateCommitmentChainTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_StateCommitmentChain *StateCommitmentChainRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _StateCommitmentChain.Contract.StateCommitmentChainTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_StateCommitmentChain *StateCommitmentChainCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _StateCommitmentChain.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_StateCommitmentChain *StateCommitmentChainTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _StateCommitmentChain.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_StateCommitmentChain *StateCommitmentChainTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _StateCommitmentChain.Contract.contract.Transact(opts, method, params...)
}

// FRAUDPROOFWINDOW is a free data retrieval call binding the contract method 0xc17b291b.
//
// Solidity: function FRAUD_PROOF_WINDOW() view returns(uint256)
func (_StateCommitmentChain *StateCommitmentChainCaller) FRAUDPROOFWINDOW(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _StateCommitmentChain.contract.Call(opts, &out, "FRAUD_PROOF_WINDOW")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// FRAUDPROOFWINDOW is a free data retrieval call binding the contract method 0xc17b291b.
//
// Solidity: function FRAUD_PROOF_WINDOW() view returns(uint256)
func (_StateCommitmentChain *StateCommitmentChainSession) FRAUDPROOFWINDOW() (*big.Int, error) {
	return _StateCommitmentChain.Contract.FRAUDPROOFWINDOW(&_StateCommitmentChain.CallOpts)
}

// FRAUDPROOFWINDOW is a free data retrieval call binding the contract method 0xc17b291b.
//
// Solidity: function FRAUD_PROOF_WINDOW() view returns(uint256)
func (_StateCommitmentChain *StateCommitmentChainCallerSession) FRAUDPROOFWINDOW() (*big.Int, error) {
	return _StateCommitmentChain.Contract.FRAUDPROOFWINDOW(&_StateCommitmentChain.CallOpts)
}

// SEQUENCERPUBLISHWINDOW is a free data retrieval call binding the contract method 0x81eb62ef.
//
// Solidity: function SEQUENCER_PUBLISH_WINDOW() view returns(uint256)
func (_StateCommitmentChain *StateCommitmentChainCaller) SEQUENCERPUBLISHWINDOW(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _StateCommitmentChain.contract.Call(opts, &out, "SEQUENCER_PUBLISH_WINDOW")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// SEQUENCERPUBLISHWINDOW is a free data retrieval call binding the contract method 0x81eb62ef.
//
// Solidity: function SEQUENCER_PUBLISH_WINDOW() view returns(uint256)
func (_StateCommitmentChain *StateCommitmentChainSession) SEQUENCERPUBLISHWINDOW() (*big.Int, error) {
	return _StateCommitmentChain.Contract.SEQUENCERPUBLISHWINDOW(&_StateCommitmentChain.CallOpts)
}

// SEQUENCERPUBLISHWINDOW is a free data retrieval call binding the contract method 0x81eb62ef.
//
// Solidity: function SEQUENCER_PUBLISH_WINDOW() view returns(uint256)
func (_StateCommitmentChain *StateCommitmentChainCallerSession) SEQUENCERPUBLISHWINDOW() (*big.Int, error) {
	return _StateCommitmentChain.Contract.SEQUENCERPUBLISHWINDOW(&_StateCommitmentChain.CallOpts)
}

// Batches is a free data retrieval call binding the contract method 0xcfdf677e.
//
// Solidity: function batches() view returns(address)
func (_StateCommitmentChain *StateCommitmentChainCaller) Batches(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _StateCommitmentChain.contract.Call(opts, &out, "batches")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Batches is a free data retrieval call binding the contract method 0xcfdf677e.
//
// Solidity: function batches() view returns(address)
func (_StateCommitmentChain *StateCommitmentChainSession) Batches() (common.Address, error) {
	return _StateCommitmentChain.Contract.Batches(&_StateCommitmentChain.CallOpts)
}

// Batches is a free data retrieval call binding the contract method 0xcfdf677e.
//
// Solidity: function batches() view returns(address)
func (_StateCommitmentChain *StateCommitmentChainCallerSession) Batches() (common.Address, error) {
	return _StateCommitmentChain.Contract.Batches(&_StateCommitmentChain.CallOpts)
}

// GetLastSequencerTimestamp is a free data retrieval call binding the contract method 0x7ad168a0.
//
// Solidity: function getLastSequencerTimestamp() view returns(uint256 _lastSequencerTimestamp)
func (_StateCommitmentChain *StateCommitmentChainCaller) GetLastSequencerTimestamp(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _StateCommitmentChain.contract.Call(opts, &out, "getLastSequencerTimestamp")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetLastSequencerTimestamp is a free data retrieval call binding the contract method 0x7ad168a0.
//
// Solidity: function getLastSequencerTimestamp() view returns(uint256 _lastSequencerTimestamp)
func (_StateCommitmentChain *StateCommitmentChainSession) GetLastSequencerTimestamp() (*big.Int, error) {
	return _StateCommitmentChain.Contract.GetLastSequencerTimestamp(&_StateCommitmentChain.CallOpts)
}

// GetLastSequencerTimestamp is a free data retrieval call binding the contract method 0x7ad168a0.
//
// Solidity: function getLastSequencerTimestamp() view returns(uint256 _lastSequencerTimestamp)
func (_StateCommitmentChain *StateCommitmentChainCallerSession) GetLastSequencerTimestamp() (*big.Int, error) {
	return _StateCommitmentChain.Contract.GetLastSequencerTimestamp(&_StateCommitmentChain.CallOpts)
}

// GetTotalBatches is a free data retrieval call binding the contract method 0xe561dddc.
//
// Solidity: function getTotalBatches() view returns(uint256 _totalBatches)
func (_StateCommitmentChain *StateCommitmentChainCaller) GetTotalBatches(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _StateCommitmentChain.contract.Call(opts, &out, "getTotalBatches")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetTotalBatches is a free data retrieval call binding the contract method 0xe561dddc.
//
// Solidity: function getTotalBatches() view returns(uint256 _totalBatches)
func (_StateCommitmentChain *StateCommitmentChainSession) GetTotalBatches() (*big.Int, error) {
	return _StateCommitmentChain.Contract.GetTotalBatches(&_StateCommitmentChain.CallOpts)
}

// GetTotalBatches is a free data retrieval call binding the contract method 0xe561dddc.
//
// Solidity: function getTotalBatches() view returns(uint256 _totalBatches)
func (_StateCommitmentChain *StateCommitmentChainCallerSession) GetTotalBatches() (*big.Int, error) {
	return _StateCommitmentChain.Contract.GetTotalBatches(&_StateCommitmentChain.CallOpts)
}

// GetTotalElements is a free data retrieval call binding the contract method 0x7aa63a86.
//
// Solidity: function getTotalElements() view returns(uint256 _totalElements)
func (_StateCommitmentChain *StateCommitmentChainCaller) GetTotalElements(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _StateCommitmentChain.contract.Call(opts, &out, "getTotalElements")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetTotalElements is a free data retrieval call binding the contract method 0x7aa63a86.
//
// Solidity: function getTotalElements() view returns(uint256 _totalElements)
func (_StateCommitmentChain *StateCommitmentChainSession) GetTotalElements() (*big.Int, error) {
	return _StateCommitmentChain.Contract.GetTotalElements(&_StateCommitmentChain.CallOpts)
}

// GetTotalElements is a free data retrieval call binding the contract method 0x7aa63a86.
//
// Solidity: function getTotalElements() view returns(uint256 _totalElements)
func (_StateCommitmentChain *StateCommitmentChainCallerSession) GetTotalElements() (*big.Int, error) {
	return _StateCommitmentChain.Contract.GetTotalElements(&_StateCommitmentChain.CallOpts)
}

// InsideFraudProofWindow is a free data retrieval call binding the contract method 0x89a1d980.
//
// Solidity: function insideFraudProofWindow((uint256,bytes32,uint256,uint256,bytes,bytes) _batchHeader) view returns(bool _inside)
func (_StateCommitmentChain *StateCommitmentChainCaller) InsideFraudProofWindow(opts *bind.CallOpts, _batchHeader LibBVMCodecChainBatchHeader) (bool, error) {
	var out []interface{}
	err := _StateCommitmentChain.contract.Call(opts, &out, "insideFraudProofWindow", _batchHeader)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// InsideFraudProofWindow is a free data retrieval call binding the contract method 0x89a1d980.
//
// Solidity: function insideFraudProofWindow((uint256,bytes32,uint256,uint256,bytes,bytes) _batchHeader) view returns(bool _inside)
func (_StateCommitmentChain *StateCommitmentChainSession) InsideFraudProofWindow(_batchHeader LibBVMCodecChainBatchHeader) (bool, error) {
	return _StateCommitmentChain.Contract.InsideFraudProofWindow(&_StateCommitmentChain.CallOpts, _batchHeader)
}

// InsideFraudProofWindow is a free data retrieval call binding the contract method 0x89a1d980.
//
// Solidity: function insideFraudProofWindow((uint256,bytes32,uint256,uint256,bytes,bytes) _batchHeader) view returns(bool _inside)
func (_StateCommitmentChain *StateCommitmentChainCallerSession) InsideFraudProofWindow(_batchHeader LibBVMCodecChainBatchHeader) (bool, error) {
	return _StateCommitmentChain.Contract.InsideFraudProofWindow(&_StateCommitmentChain.CallOpts, _batchHeader)
}

// LibAddressManager is a free data retrieval call binding the contract method 0x299ca478.
//
// Solidity: function libAddressManager() view returns(address)
func (_StateCommitmentChain *StateCommitmentChainCaller) LibAddressManager(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _StateCommitmentChain.contract.Call(opts, &out, "libAddressManager")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// LibAddressManager is a free data retrieval call binding the contract method 0x299ca478.
//
// Solidity: function libAddressManager() view returns(address)
func (_StateCommitmentChain *StateCommitmentChainSession) LibAddressManager() (common.Address, error) {
	return _StateCommitmentChain.Contract.LibAddressManager(&_StateCommitmentChain.CallOpts)
}

// LibAddressManager is a free data retrieval call binding the contract method 0x299ca478.
//
// Solidity: function libAddressManager() view returns(address)
func (_StateCommitmentChain *StateCommitmentChainCallerSession) LibAddressManager() (common.Address, error) {
	return _StateCommitmentChain.Contract.LibAddressManager(&_StateCommitmentChain.CallOpts)
}

// Messenger is a free data retrieval call binding the contract method 0x3cb747bf.
//
// Solidity: function messenger() view returns(address)
func (_StateCommitmentChain *StateCommitmentChainCaller) Messenger(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _StateCommitmentChain.contract.Call(opts, &out, "messenger")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Messenger is a free data retrieval call binding the contract method 0x3cb747bf.
//
// Solidity: function messenger() view returns(address)
func (_StateCommitmentChain *StateCommitmentChainSession) Messenger() (common.Address, error) {
	return _StateCommitmentChain.Contract.Messenger(&_StateCommitmentChain.CallOpts)
}

// Messenger is a free data retrieval call binding the contract method 0x3cb747bf.
//
// Solidity: function messenger() view returns(address)
func (_StateCommitmentChain *StateCommitmentChainCallerSession) Messenger() (common.Address, error) {
	return _StateCommitmentChain.Contract.Messenger(&_StateCommitmentChain.CallOpts)
}

// Resolve is a free data retrieval call binding the contract method 0x461a4478.
//
// Solidity: function resolve(string _name) view returns(address)
func (_StateCommitmentChain *StateCommitmentChainCaller) Resolve(opts *bind.CallOpts, _name string) (common.Address, error) {
	var out []interface{}
	err := _StateCommitmentChain.contract.Call(opts, &out, "resolve", _name)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Resolve is a free data retrieval call binding the contract method 0x461a4478.
//
// Solidity: function resolve(string _name) view returns(address)
func (_StateCommitmentChain *StateCommitmentChainSession) Resolve(_name string) (common.Address, error) {
	return _StateCommitmentChain.Contract.Resolve(&_StateCommitmentChain.CallOpts, _name)
}

// Resolve is a free data retrieval call binding the contract method 0x461a4478.
//
// Solidity: function resolve(string _name) view returns(address)
func (_StateCommitmentChain *StateCommitmentChainCallerSession) Resolve(_name string) (common.Address, error) {
	return _StateCommitmentChain.Contract.Resolve(&_StateCommitmentChain.CallOpts, _name)
}

// VerifyStateCommitment is a free data retrieval call binding the contract method 0xb768bb17.
//
// Solidity: function verifyStateCommitment(bytes32 _element, (uint256,bytes32,uint256,uint256,bytes,bytes) _batchHeader, (uint256,bytes32[]) _proof) view returns(bool)
func (_StateCommitmentChain *StateCommitmentChainCaller) VerifyStateCommitment(opts *bind.CallOpts, _element [32]byte, _batchHeader LibBVMCodecChainBatchHeader, _proof LibBVMCodecChainInclusionProof) (bool, error) {
	var out []interface{}
	err := _StateCommitmentChain.contract.Call(opts, &out, "verifyStateCommitment", _element, _batchHeader, _proof)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// VerifyStateCommitment is a free data retrieval call binding the contract method 0xb768bb17.
//
// Solidity: function verifyStateCommitment(bytes32 _element, (uint256,bytes32,uint256,uint256,bytes,bytes) _batchHeader, (uint256,bytes32[]) _proof) view returns(bool)
func (_StateCommitmentChain *StateCommitmentChainSession) VerifyStateCommitment(_element [32]byte, _batchHeader LibBVMCodecChainBatchHeader, _proof LibBVMCodecChainInclusionProof) (bool, error) {
	return _StateCommitmentChain.Contract.VerifyStateCommitment(&_StateCommitmentChain.CallOpts, _element, _batchHeader, _proof)
}

// VerifyStateCommitment is a free data retrieval call binding the contract method 0xb768bb17.
//
// Solidity: function verifyStateCommitment(bytes32 _element, (uint256,bytes32,uint256,uint256,bytes,bytes) _batchHeader, (uint256,bytes32[]) _proof) view returns(bool)
func (_StateCommitmentChain *StateCommitmentChainCallerSession) VerifyStateCommitment(_element [32]byte, _batchHeader LibBVMCodecChainBatchHeader, _proof LibBVMCodecChainInclusionProof) (bool, error) {
	return _StateCommitmentChain.Contract.VerifyStateCommitment(&_StateCommitmentChain.CallOpts, _element, _batchHeader, _proof)
}

// AppendStateBatch is a paid mutator transaction binding the contract method 0x2169f79f.
//
// Solidity: function appendStateBatch(bytes32[] _batch, uint256 _shouldStartAtElement, bytes _signature) returns()
func (_StateCommitmentChain *StateCommitmentChainTransactor) AppendStateBatch(opts *bind.TransactOpts, _batch [][32]byte, _shouldStartAtElement *big.Int, _signature []byte) (*types.Transaction, error) {
	return _StateCommitmentChain.contract.Transact(opts, "appendStateBatch", _batch, _shouldStartAtElement, _signature)
}

// AppendStateBatch is a paid mutator transaction binding the contract method 0x2169f79f.
//
// Solidity: function appendStateBatch(bytes32[] _batch, uint256 _shouldStartAtElement, bytes _signature) returns()
func (_StateCommitmentChain *StateCommitmentChainSession) AppendStateBatch(_batch [][32]byte, _shouldStartAtElement *big.Int, _signature []byte) (*types.Transaction, error) {
	return _StateCommitmentChain.Contract.AppendStateBatch(&_StateCommitmentChain.TransactOpts, _batch, _shouldStartAtElement, _signature)
}

// AppendStateBatch is a paid mutator transaction binding the contract method 0x2169f79f.
//
// Solidity: function appendStateBatch(bytes32[] _batch, uint256 _shouldStartAtElement, bytes _signature) returns()
func (_StateCommitmentChain *StateCommitmentChainTransactorSession) AppendStateBatch(_batch [][32]byte, _shouldStartAtElement *big.Int, _signature []byte) (*types.Transaction, error) {
	return _StateCommitmentChain.Contract.AppendStateBatch(&_StateCommitmentChain.TransactOpts, _batch, _shouldStartAtElement, _signature)
}

// DeleteStateBatch is a paid mutator transaction binding the contract method 0x5b4d90e2.
//
// Solidity: function deleteStateBatch((uint256,bytes32,uint256,uint256,bytes,bytes) _batchHeader) returns()
func (_StateCommitmentChain *StateCommitmentChainTransactor) DeleteStateBatch(opts *bind.TransactOpts, _batchHeader LibBVMCodecChainBatchHeader) (*types.Transaction, error) {
	return _StateCommitmentChain.contract.Transact(opts, "deleteStateBatch", _batchHeader)
}

// DeleteStateBatch is a paid mutator transaction binding the contract method 0x5b4d90e2.
//
// Solidity: function deleteStateBatch((uint256,bytes32,uint256,uint256,bytes,bytes) _batchHeader) returns()
func (_StateCommitmentChain *StateCommitmentChainSession) DeleteStateBatch(_batchHeader LibBVMCodecChainBatchHeader) (*types.Transaction, error) {
	return _StateCommitmentChain.Contract.DeleteStateBatch(&_StateCommitmentChain.TransactOpts, _batchHeader)
}

// DeleteStateBatch is a paid mutator transaction binding the contract method 0x5b4d90e2.
//
// Solidity: function deleteStateBatch((uint256,bytes32,uint256,uint256,bytes,bytes) _batchHeader) returns()
func (_StateCommitmentChain *StateCommitmentChainTransactorSession) DeleteStateBatch(_batchHeader LibBVMCodecChainBatchHeader) (*types.Transaction, error) {
	return _StateCommitmentChain.Contract.DeleteStateBatch(&_StateCommitmentChain.TransactOpts, _batchHeader)
}

// StateCommitmentChainDistributeTssRewardIterator is returned from FilterDistributeTssReward and is used to iterate over the raw logs and unpacked data for DistributeTssReward events raised by the StateCommitmentChain contract.
type StateCommitmentChainDistributeTssRewardIterator struct {
	Event *StateCommitmentChainDistributeTssReward // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StateCommitmentChainDistributeTssRewardIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StateCommitmentChainDistributeTssReward)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StateCommitmentChainDistributeTssReward)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StateCommitmentChainDistributeTssRewardIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StateCommitmentChainDistributeTssRewardIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StateCommitmentChainDistributeTssReward represents a DistributeTssReward event raised by the StateCommitmentChain contract.
type StateCommitmentChainDistributeTssReward struct {
	StartBlockNumber *big.Int
	Length           *big.Int
	TssMembers       []common.Address
	Raw              types.Log // Blockchain specific contextual infos
}

// FilterDistributeTssReward is a free log retrieval operation binding the contract event 0xf630cba6d450d736e85735388d4fe67a177b8a3685cdd7dee2bea7727b47860a.
//
// Solidity: event DistributeTssReward(uint256 indexed _startBlockNumber, uint256 _length, address[] _tssMembers)
func (_StateCommitmentChain *StateCommitmentChainFilterer) FilterDistributeTssReward(opts *bind.FilterOpts, _startBlockNumber []*big.Int) (*StateCommitmentChainDistributeTssRewardIterator, error) {

	var _startBlockNumberRule []interface{}
	for _, _startBlockNumberItem := range _startBlockNumber {
		_startBlockNumberRule = append(_startBlockNumberRule, _startBlockNumberItem)
	}

	logs, sub, err := _StateCommitmentChain.contract.FilterLogs(opts, "DistributeTssReward", _startBlockNumberRule)
	if err != nil {
		return nil, err
	}
	return &StateCommitmentChainDistributeTssRewardIterator{contract: _StateCommitmentChain.contract, event: "DistributeTssReward", logs: logs, sub: sub}, nil
}

// WatchDistributeTssReward is a free log subscription operation binding the contract event 0xf630cba6d450d736e85735388d4fe67a177b8a3685cdd7dee2bea7727b47860a.
//
// Solidity: event DistributeTssReward(uint256 indexed _startBlockNumber, uint256 _length, address[] _tssMembers)
func (_StateCommitmentChain *StateCommitmentChainFilterer) WatchDistributeTssReward(opts *bind.WatchOpts, sink chan<- *StateCommitmentChainDistributeTssReward, _startBlockNumber []*big.Int) (event.Subscription, error) {

	var _startBlockNumberRule []interface{}
	for _, _startBlockNumberItem := range _startBlockNumber {
		_startBlockNumberRule = append(_startBlockNumberRule, _startBlockNumberItem)
	}

	logs, sub, err := _StateCommitmentChain.contract.WatchLogs(opts, "DistributeTssReward", _startBlockNumberRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StateCommitmentChainDistributeTssReward)
				if err := _StateCommitmentChain.contract.UnpackLog(event, "DistributeTssReward", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDistributeTssReward is a log parse operation binding the contract event 0xf630cba6d450d736e85735388d4fe67a177b8a3685cdd7dee2bea7727b47860a.
//
// Solidity: event DistributeTssReward(uint256 indexed _startBlockNumber, uint256 _length, address[] _tssMembers)
func (_StateCommitmentChain *StateCommitmentChainFilterer) ParseDistributeTssReward(log types.Log) (*StateCommitmentChainDistributeTssReward, error) {
	event := new(StateCommitmentChainDistributeTssReward)
	if err := _StateCommitmentChain.contract.UnpackLog(event, "DistributeTssReward", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StateCommitmentChainStateBatchAppendedIterator is returned from FilterStateBatchAppended and is used to iterate over the raw logs and unpacked data for StateBatchAppended events raised by the StateCommitmentChain contract.
type StateCommitmentChainStateBatchAppendedIterator struct {
	Event *StateCommitmentChainStateBatchAppended // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StateCommitmentChainStateBatchAppendedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StateCommitmentChainStateBatchAppended)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StateCommitmentChainStateBatchAppended)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StateCommitmentChainStateBatchAppendedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StateCommitmentChainStateBatchAppendedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StateCommitmentChainStateBatchAppended represents a StateBatchAppended event raised by the StateCommitmentChain contract.
type StateCommitmentChainStateBatchAppended struct {
	BatchIndex        *big.Int
	BatchRoot         [32]byte
	BatchSize         *big.Int
	PrevTotalElements *big.Int
	Signature         []byte
	ExtraData         []byte
	Raw               types.Log // Blockchain specific contextual infos
}

// FilterStateBatchAppended is a free log retrieval operation binding the contract event 0x9cf3ad24eae3fd6d461e2f566b35b95b6d671871d9fcb45f8ac8030e4a8d21b3.
//
// Solidity: event StateBatchAppended(uint256 indexed _batchIndex, bytes32 _batchRoot, uint256 _batchSize, uint256 _prevTotalElements, bytes signature, bytes _extraData)
func (_StateCommitmentChain *StateCommitmentChainFilterer) FilterStateBatchAppended(opts *bind.FilterOpts, _batchIndex []*big.Int) (*StateCommitmentChainStateBatchAppendedIterator, error) {

	var _batchIndexRule []interface{}
	for _, _batchIndexItem := range _batchIndex {
		_batchIndexRule = append(_batchIndexRule, _batchIndexItem)
	}

	logs, sub, err := _StateCommitmentChain.contract.FilterLogs(opts, "StateBatchAppended", _batchIndexRule)
	if err != nil {
		return nil, err
	}
	return &StateCommitmentChainStateBatchAppendedIterator{contract: _StateCommitmentChain.contract, event: "StateBatchAppended", logs: logs, sub: sub}, nil
}

// WatchStateBatchAppended is a free log subscription operation binding the contract event 0x9cf3ad24eae3fd6d461e2f566b35b95b6d671871d9fcb45f8ac8030e4a8d21b3.
//
// Solidity: event StateBatchAppended(uint256 indexed _batchIndex, bytes32 _batchRoot, uint256 _batchSize, uint256 _prevTotalElements, bytes signature, bytes _extraData)
func (_StateCommitmentChain *StateCommitmentChainFilterer) WatchStateBatchAppended(opts *bind.WatchOpts, sink chan<- *StateCommitmentChainStateBatchAppended, _batchIndex []*big.Int) (event.Subscription, error) {

	var _batchIndexRule []interface{}
	for _, _batchIndexItem := range _batchIndex {
		_batchIndexRule = append(_batchIndexRule, _batchIndexItem)
	}

	logs, sub, err := _StateCommitmentChain.contract.WatchLogs(opts, "StateBatchAppended", _batchIndexRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StateCommitmentChainStateBatchAppended)
				if err := _StateCommitmentChain.contract.UnpackLog(event, "StateBatchAppended", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseStateBatchAppended is a log parse operation binding the contract event 0x9cf3ad24eae3fd6d461e2f566b35b95b6d671871d9fcb45f8ac8030e4a8d21b3.
//
// Solidity: event StateBatchAppended(uint256 indexed _batchIndex, bytes32 _batchRoot, uint256 _batchSize, uint256 _prevTotalElements, bytes signature, bytes _extraData)
func (_StateCommitmentChain *StateCommitmentChainFilterer) ParseStateBatchAppended(log types.Log) (*StateCommitmentChainStateBatchAppended, error) {
	event := new(StateCommitmentChainStateBatchAppended)
	if err := _StateCommitmentChain.contract.UnpackLog(event, "StateBatchAppended", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StateCommitmentChainStateBatchDeletedIterator is returned from FilterStateBatchDeleted and is used to iterate over the raw logs and unpacked data for StateBatchDeleted events raised by the StateCommitmentChain contract.
type StateCommitmentChainStateBatchDeletedIterator struct {
	Event *StateCommitmentChainStateBatchDeleted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StateCommitmentChainStateBatchDeletedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StateCommitmentChainStateBatchDeleted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StateCommitmentChainStateBatchDeleted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StateCommitmentChainStateBatchDeletedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StateCommitmentChainStateBatchDeletedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StateCommitmentChainStateBatchDeleted represents a StateBatchDeleted event raised by the StateCommitmentChain contract.
type StateCommitmentChainStateBatchDeleted struct {
	BatchIndex *big.Int
	BatchRoot  [32]byte
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterStateBatchDeleted is a free log retrieval operation binding the contract event 0x8747b69ce8fdb31c3b9b0a67bd8049ad8c1a69ea417b69b12174068abd9cbd64.
//
// Solidity: event StateBatchDeleted(uint256 indexed _batchIndex, bytes32 _batchRoot)
func (_StateCommitmentChain *StateCommitmentChainFilterer) FilterStateBatchDeleted(opts *bind.FilterOpts, _batchIndex []*big.Int) (*StateCommitmentChainStateBatchDeletedIterator, error) {

	var _batchIndexRule []interface{}
	for _, _batchIndexItem := range _batchIndex {
		_batchIndexRule = append(_batchIndexRule, _batchIndexItem)
	}

	logs, sub, err := _StateCommitmentChain.contract.FilterLogs(opts, "StateBatchDeleted", _batchIndexRule)
	if err != nil {
		return nil, err
	}
	return &StateCommitmentChainStateBatchDeletedIterator{contract: _StateCommitmentChain.contract, event: "StateBatchDeleted", logs: logs, sub: sub}, nil
}

// WatchStateBatchDeleted is a free log subscription operation binding the contract event 0x8747b69ce8fdb31c3b9b0a67bd8049ad8c1a69ea417b69b12174068abd9cbd64.
//
// Solidity: event StateBatchDeleted(uint256 indexed _batchIndex, bytes32 _batchRoot)
func (_StateCommitmentChain *StateCommitmentChainFilterer) WatchStateBatchDeleted(opts *bind.WatchOpts, sink chan<- *StateCommitmentChainStateBatchDeleted, _batchIndex []*big.Int) (event.Subscription, error) {

	var _batchIndexRule []interface{}
	for _, _batchIndexItem := range _batchIndex {
		_batchIndexRule = append(_batchIndexRule, _batchIndexItem)
	}

	logs, sub, err := _StateCommitmentChain.contract.WatchLogs(opts, "StateBatchDeleted", _batchIndexRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StateCommitmentChainStateBatchDeleted)
				if err := _StateCommitmentChain.contract.UnpackLog(event, "StateBatchDeleted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseStateBatchDeleted is a log parse operation binding the contract event 0x8747b69ce8fdb31c3b9b0a67bd8049ad8c1a69ea417b69b12174068abd9cbd64.
//
// Solidity: event StateBatchDeleted(uint256 indexed _batchIndex, bytes32 _batchRoot)
func (_StateCommitmentChain *StateCommitmentChainFilterer) ParseStateBatchDeleted(log types.Log) (*StateCommitmentChainStateBatchDeleted, error) {
	event := new(StateCommitmentChainStateBatchDeleted)
	if err := _StateCommitmentChain.contract.UnpackLog(event, "StateBatchDeleted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
