version: 2.1

jobs:
  yarn-monorepo:
    docker:
      - image: ethereummantle/ci-builder:latest
    resource_class: xlarge
    steps:
      - restore_cache:
          keys:
            - v2-cache-source-{{ .Branch }}-{{ .Revision }}
            - v2-cache-source-{{ .Branch }}
      - checkout
      - run:
          name: Check if we should run
          command: |
            shopt -s inherit_errexit
            circleci step halt
      - save_cache:
          key: v2-cache-source-{{ .Branch }}-{{ .Revision }}
          paths:
            - ".git"
      - restore_cache:
          keys:
            - v2-cache-yarn-install-{{ checksum "yarn.lock" }}
            - v2-cache-yarn-install
      - run:
          name: Install dependencies
          command: yarn --frozen-lockfile
      - save_cache:
          key: v2-cache-yarn-install-{{ checksum "yarn.lock" }}
          paths:
            - node_modules
            - packages/common-ts/node_modules
            - packages/contracts/node_modules
            - packages/core-utils/node_modules
            - packages/data-transport-layer/node_modules
            - packages/fault-detector/node_modules
            - packages/message-relayer/node_modules
            - packages/replica-healthcheck/node_modules
            - packages/sdk/node_modules
            - integration-tests/node_modules
      - run:
          name: Build monorepo
          command: yarn build
      - save_cache:
          key: v2-cache-yarn-build-{{ .Revision }}
          paths:
            - "."

  docker-publish:
    environment:
      DOCKER_BUILDKIT: 1
    parameters:
      docker_tags:
        description: Docker image tags as csv
        type: string
      docker_file:
        description: Path to Dockerfile
        type: string
      docker_context:
        description: Docker build context
        type: string
      target:
        description: Docker build target
        type: string
        default: ""
    docker:
      - image: circleci/buildpack-deps:stretch
    steps:
      - checkout
      - setup_remote_docker:
          version: 20.10.12
      - when:
          condition: <<parameters.target>>
          steps:
            - run:
                name: Build with context
                command: |
                  docker build \
                  $(echo -ne "<< parameters.docker_tags >>" | sed "s/,/\n/g" | sed -e 's/^/-t /' | tr '\n' ' ') \
                  -f <<parameters.docker_file>> \
                  --target <<parameters.target>> \
                  <<parameters.docker_context>>
      - unless:
          condition: <<parameters.target>>
          steps:
            - run:
                name: Build
                command: |
                  docker build \
                  $(echo -ne "<< parameters.docker_tags >>" | sed "s/,/\n/g" | sed -e 's/^/-t /' | tr '\n' ' ') \
                  -f <<parameters.docker_file>> \
                  <<parameters.docker_context>>
      - run:
          name: Publish
          command: |
            echo "$DOCKER_PASS" | docker login -u "$DOCKER_USERNAME" --password-stdin
            docker push <<parameters.docker_tags>>

  js-lint-test:
    parameters:
      package_name:
        description: Package name
        type: string
      dependencies:
        description: Regex matching dependent packages
        type: string
        default: this-package-does-not-exist
    docker:
      - image: ethereummantle/ci-builder:latest
    resource_class: large
    steps:
      - restore_cache:
          keys:
            - v2-cache-yarn-build-{{ .Revision }}
      - checkout
      - run:
          name: Check if we should run
          command: |
            shopt -s inherit_errexit
            CHANGED=$(check-changed "(packages/<<parameters.package_name>>|packages/<<parameters.dependencies>>)")
            if [[ "$CHANGED" = "FALSE" ]]; then
              circleci step halt
            fi
      - run:
          name: Lint
          command: yarn lint:check
          working_directory: packages/<<parameters.package_name>>
      - run:
          name: Test
          command: yarn test:coverage
          working_directory: packages/<<parameters.package_name>>

  depcheck:
    docker:
      - image: ethereummantle/ci-builder:latest
    steps:
      - restore_cache:
          keys:
            - v2-cache-yarn-build-{{ .Revision }}
      - checkout
      - run:
          name: Check if we should run
          command: |
            shopt -s inherit_errexit
            CHANGED=$(check-changed "packages/")
            if [[ "$CHANGED" = "FALSE" ]]; then
              circleci step halt
            fi
      # Note: The below needs to be manually configured whenever we
      # add a new package to CI.
      - run:
          name: Check contracts
          command: npx depcheck
          working_directory: packages/contracts
      - run:
          name: Check core-utils
          command: npx depcheck
          working_directory: packages/core-utils
      - run:
          name: Check data-transport-layer
          command: npx depcheck
          working_directory: packages/data-transport-layer
      - run:
          name: Check sdk
          command: npx depcheck
          working_directory: packages/sdk
      - run:
          name: Check integration-tests
          command: npx depcheck
          working_directory: integration-tests

  go-lint-test-build:
    parameters:
      binary_name:
        description: Binary name to build
        type: string
      working_directory:
        description: Working directory
        type: string
      build:
        description: Whether or not to build the binary
        type: boolean
        default: true
      dependencies:
        description: Regex matching dependent packages
        type: string
        default: this-package-does-not-exist
    docker:
      - image: ethereummantle/ci-builder:latest
      - image: cimg/postgres:14.1
    steps:
      - checkout
      - run:
          name: Check if we should run
          command: |
            shopt -s inherit_errexit
            CHANGED=$(check-changed "(<<parameters.working_directory>>|<<parameters.dependencies>>)")
            echo $CHANGED
            if [[ "$CHANGED" = "FALSE" ]]; then
              circleci step halt
            fi
      - run:
          name: Lint
          command: golangci-lint run -E goimports,sqlclosecheck,bodyclose,asciicheck,misspell ./...
          working_directory: <<parameters.working_directory>>
      - store_test_results:
          path: /test-results
      - run:
          name: Test
          command: |
            mkdir -p /test-results
            gotestsum --junitfile /test-results/tests.xml
          working_directory: <<parameters.working_directory>>
      - when:
          condition:
            equal: [ true, <<parameters.build>> ]
          steps:
            - run:
                name: Build
                command: make <<parameters.binary_name>>
                working_directory: <<parameters.working_directory>>

  geth-tests:
    docker:
      - image: ethereummantle/ci-builder:latest
    steps:
      - checkout
      - run:
          name: Check if we should run
          command: |
            shopt -s inherit_errexit
            CHANGED=$(check-changed "l2geth")
            if [[ "$CHANGED" = "FALSE" ]]; then
              circleci step halt
            fi
      - run:
          name: Test
          command: make test
          working_directory: l2geth

  integration-tests:
    machine:
      image: ubuntu-2004:202201-01
      docker_layer_caching: true
    environment:
      DOCKER_BUILDKIT: 1
    parallelism: 3
    steps:
      - checkout
      - run:
          name: Check if we should run
          command: |
            shopt -s inherit_errexit
            CHANGED=$(bash ./ops/docker/ci-builder/check-changed.sh "(l2geth|common-ts|contracts|core-utils|message-relayer|data-transport-layer|replica-healthcheck|sdk|batch-submitter|gas-oracle|bss-core|integration-tests)/")
            if [[ "$CHANGED" = "FALSE" ]]; then
              circleci step halt
            fi
      - run:
          name: Bring up the stack
          command: |
            docker-compose build --progress=plain
            docker-compose up -d --scale replica_healthcheck=1
          working_directory: ops
      - run:
          name: Wait for sequencer
          command: bash scripts/wait-for-sequencer.sh
          working_directory: ops
      - run:
          name: Run integration tests
          command: |
            circleci tests glob "../integration-tests/test/*.spec.ts" | circleci tests split | tee splits.txt
            docker-compose run integration_tests $(cat splits.txt)
          working_directory: ops
      - run:
          command: echo "Done."

  semgrep-scan:
    parameters:
      diff_branch:
        type: string
        default: develop
    environment:
      TEMPORARY_BASELINE_REF: << parameters.diff_branch >>
      SEMGREP_REPO_URL: << pipeline.project.git_url >>
      SEMGREP_BRANCH: << pipeline.git.branch >>
      SEMGREP_COMMIT: << pipeline.git.revision >>

      # Change job timeout (default is 1800 seconds; set to 0 to disable)
      SEMGREP_TIMEOUT: 3000

    docker:
      - image: returntocorp/semgrep
    resource_class: xlarge
    steps:
      - checkout
      - unless:
          condition:
            equal: [ "develop", << pipeline.git.branch >> ]
          steps:
            - run:
                # Scan changed files in PRs, block on new issues only (existing issues ignored)
                # Do a full scan when scanning develop, otherwise do an incremental scan.
                name: "Conditionally set BASELINE env var"
                command: |
                  echo 'export SEMGREP_BASELINE_REF=${TEMPORARY_BASELINE_REF}' >> $BASH_ENV
      - run:
          name: "Set environment variables" # for PR comments and in-app hyperlinks to findings
          command: |
            echo 'export SEMGREP_PR_ID=${CIRCLE_PULL_REQUEST##*/}' >> $BASH_ENV
            echo 'export SEMGREP_JOB_URL=$CIRCLE_BUILD_URL' >> $BASH_ENV
            echo 'export SEMGREP_REPO_NAME=$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME' >> $BASH_ENV
      - run:
          name: "Semgrep scan"
          command: semgrep ci

  go-mod-tidy:
    docker:
      - image: ethereummantle/ci-builder:latest
    steps:
      - checkout
      - run:
          name: "Go mod tidy"
          command: make mod-tidy && git diff --exit-code


workflows:
  main:
    jobs:
      - yarn-monorepo
      - js-lint-test:
          name: common-ts-tests
          package_name: common-ts
          requires:
            - yarn-monorepo
      - js-lint-test:
          name: contracts-tests
          package_name: contracts
          dependencies: hardhat-deploy-config
          requires:
            - yarn-monorepo
      - js-lint-test:
          name: core-utils-tests
          package_name: core-utils
          requires:
            - yarn-monorepo
      - js-lint-test:
          name: dtl-tests
          package_name: data-transport-layer
          dependencies: "(common-ts|contracts|core-utils)"
          requires:
            - yarn-monorepo
      - js-lint-test:
          name: fault-detector-tests
          package_name: fault-detector
          dependencies: "(common-ts|contracts|core-utils|sdk)"
          requires:
            - yarn-monorepo
      - js-lint-test:
          name: message-relayer-tests
          package_name: message-relayer
          dependencies: "(common-ts|core-utils|sdk)"
          requires:
            - yarn-monorepo
      - js-lint-test:
          name: replica-healthcheck-tests
          package_name: replica-healthcheck
          dependencies: "(common-ts|core-utils)"
          requires:
            - yarn-monorepo
      - js-lint-test:
          name: sdk-tests
          package_name: sdk
          dependencies: "(contracts|core-utils)"
          requires:
            - yarn-monorepo
      - depcheck:
          requires:
            - yarn-monorepo
      - go-lint-test-build:
          name: batch-submitter-tests
          binary_name: batch-submitter
          working_directory: batch-submitter
          dependencies: bss-core
      - go-lint-test-build:
          name: proxyd-tests
          binary_name: proxyd
          working_directory: proxyd
      - go-lint-test-build:
          name: gas-oracle-tests
          binary_name: gas-oracle
          working_directory: gas-oracle
      - go-lint-test-build:
          name: bss-core-tests
          binary_name: bss-core
          working_directory: bss-core
          build: false
      - geth-tests
      - integration-tests
      - semgrep-scan
      - go-mod-tidy

  nightly:
    triggers:
      - schedule:
          cron: "0 10 * * *"
          filters:
            branches:
              only:
                - develop
    jobs:
      - yarn-monorepo
      - docker-publish:
          name: l2geth-release
          docker_file: l2geth/Dockerfile
          docker_tags: ethereummantle/l2geth:nightly
          docker_context: .
          context:
            - mantle
      - docker-publish:
          name: gas-oracle-release
          docker_file: gas-oracle/Dockerfile
          docker_tags: ethereummantle/gas-oracle:nightly
          docker_context: .
          context:
            - mantle
      - docker-publish:
          name: hardhat-node-release
          docker_file: ops/docker/hardhat/Dockerfile
          docker_tags: ethereummantle/hardhat-node:nightly
          docker_context: ops/docker/hardhat
          context:
            - mantle
      - docker-publish:
          name: proxyd-release
          docker_file: proxyd/Dockerfile
          docker_tags: ethereummantle/proxyd:nightly
          docker_context: .
          context:
            - mantle
      - docker-publish:
          name: l2geth-exporter-release
          docker_file: l2geth-exporter/Dockerfile
          docker_tags: ethereummantle/l2geth-exporter:nightly
          docker_context: .
          context:
            - mantle
      - docker-publish:
          name: fault-detector-release
          docker_file: ops/docker/Dockerfile.packages
          docker_tags: ethereummantle/fault-detector:nightly
          docker_context: .
          target: fault-detector
          context:
            - mantle
      - docker-publish:
          name: message-relayer-release
          docker_file: ops/docker/Dockerfile.packages
          docker_tags: ethereummantle/message-relayer:nightly
          docker_context: .
          target: message-relayer
          context:
            - mantle
      - docker-publish:
          name: data-transport-layer-release
          docker_file: ops/docker/Dockerfile.packages
          docker_tags: ethereummantle/data-transport-layer:nightly
          docker_context: .
          target: data-transport-layer
          context:
            - mantle
      - docker-publish:
          name: integration-tests-release
          docker_file: ops/docker/Dockerfile.packages
          docker_tags: ethereummantle/integration-tests:nightly
          docker_context: .
          target: integration-tests
          context:
            - mantle
      - docker-publish:
          name: replica-healthcheck-release
          docker_file: ops/docker/Dockerfile.packages
          docker_tags: ethereummantle/replica-healthcheck:nightly
          docker_context: .
          target: replica-healthcheck
          context:
            - mantle
      - docker-publish:
          name: batch-submitter-release
          docker_file: batch-submitter/Dockerfile
          docker_tags: ethereummantle/batch-submitter-service:nightly
          docker_context: .
          context:
            - mantle
